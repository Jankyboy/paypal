//go:build go1.22

// Package srv provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package srv

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	Oauth2Scopes = "Oauth2.Scopes"
)

// Defines values for Carrier.
const (
	A1POST                                Carrier = "A1POST"
	AAACOOPER                             Carrier = "AAA_COOPER"
	ABCUSTOM                              Carrier = "ABCUSTOM"
	ABXEXPRESSMY                          Carrier = "ABXEXPRESS_MY"
	ACOMMMERCE                            Carrier = "ACOMMMERCE"
	ACSGR                                 Carrier = "ACS_GR"
	ACSWORLDWIDE                          Carrier = "ACSWORLDWIDE"
	ADERONLINE                            Carrier = "ADERONLINE"
	ADICIONAL                             Carrier = "ADICIONAL"
	ADSONE                                Carrier = "ADSONE"
	ADUIEPYLE                             Carrier = "ADUIEPYLE"
	AERONET                               Carrier = "AERONET"
	AEX                                   Carrier = "AEX"
	AFLLOGFTP                             Carrier = "AFLLOG_FTP"
	AGILITY                               Carrier = "AGILITY"
	AIRCANADAGLOBAL                       Carrier = "AIR_CANADA_GLOBAL"
	AIRMEEWEBHOOK                         Carrier = "AIRMEE_WEBHOOK"
	ALFATREX                              Carrier = "ALFATREX"
	ALLIEDEXPRESS                         Carrier = "ALLIEDEXPRESS"
	ALLJOY                                Carrier = "ALLJOY"
	ALPHAFAST                             Carrier = "ALPHAFAST"
	ALWAYSEXPRESS                         Carrier = "ALWAYS_EXPRESS"
	AMAZON                                Carrier = "AMAZON"
	AMAZONFBASWISHIP                      Carrier = "AMAZON_FBA_SWISHIP"
	AMAZONSHIPMCF                         Carrier = "AMAZON_SHIP_MCF"
	AMSGRP                                Carrier = "AMS_GRP"
	AMSTAN                                Carrier = "AMSTAN"
	ANDREANI                              Carrier = "ANDREANI"
	ANICAMBOX                             Carrier = "ANICAM_BOX"
	ANJUN                                 Carrier = "ANJUN"
	ANPOST                                Carrier = "AN_POST"
	ANSERX                                Carrier = "ANSERX"
	AOCOURIER                             Carrier = "AO_COURIER"
	AODEUTSCHLAND                         Carrier = "AO_DEUTSCHLAND"
	APCOVERNIGHT                          Carrier = "APC_OVERNIGHT"
	APCOVERNIGHTCONNUM                    Carrier = "APC_OVERNIGHT_CONNUM"
	APG                                   Carrier = "APG"
	APRISAEXPRESS                         Carrier = "APRISAEXPRESS"
	AQUILINE                              Carrier = "AQUILINE"
	ARAMEX                                Carrier = "ARAMEX"
	ARAMEXAU                              Carrier = "ARAMEX_AU"
	ARCOSPEDIZIONI                        Carrier = "ARCO_SPEDIZIONI"
	AREEMIRATESPOST                       Carrier = "ARE_EMIRATES_POST"
	ARGOCA                                Carrier = "ARG_OCA"
	ARKLOGISTICS                          Carrier = "ARK_LOGISTICS"
	ASE                                   Carrier = "ASE"
	ASENDIAHK                             Carrier = "ASENDIA_HK"
	ASENDIAUK                             Carrier = "ASENDIA_UK"
	ASENDIAUSA                            Carrier = "ASENDIA_USA"
	ASIGNA                                Carrier = "ASIGNA"
	AUAUPOST                              Carrier = "AU_AU_POST"
	AUAUSTRIANPOST                        Carrier = "AU_AUSTRIAN_POST"
	AUPOSTCN                              Carrier = "AUPOST_CN"
	AUSSTARTRACK                          Carrier = "AUS_STARTRACK"
	AUSTOLL                               Carrier = "AUS_TOLL"
	AUSTRIANPOSTEXPRESS                   Carrier = "AUSTRIAN_POST_EXPRESS"
	AUTNT                                 Carrier = "AU_TNT"
	AVERITT                               Carrier = "AVERITT"
	BEBPOST                               Carrier = "BE_BPOST"
	BEKIALA                               Carrier = "BE_KIALA"
	BELDHL                                Carrier = "BEL_DHL"
	BELRS                                 Carrier = "BEL_RS"
	BESTWAYPARCEL                         Carrier = "BESTWAYPARCEL"
	BGBULGARIANPOST                       Carrier = "BG_BULGARIAN_POST"
	BHPOSTA                               Carrier = "BH_POSTA"
	BHWORLDWIDE                           Carrier = "BH_WORLDWIDE"
	BIRDSYSTEM                            Carrier = "BIRDSYSTEM"
	BJSHOMEDELIVERY                       Carrier = "BJSHOMEDELIVERY"
	BLINKLASTMILE                         Carrier = "BLINKLASTMILE"
	BLRBELPOST                            Carrier = "BLR_BELPOST"
	BLUECARE                              Carrier = "BLUECARE"
	BLUESTAR                              Carrier = "BLUESTAR"
	BLUEX                                 Carrier = "BLUEX"
	BNEED                                 Carrier = "BNEED"
	BOMBINOEXP                            Carrier = "BOMBINOEXP"
	BOND                                  Carrier = "BOND"
	BONDSCOURIERS                         Carrier = "BONDSCOURIERS"
	BORDEREXPRESS                         Carrier = "BORDEREXPRESS"
	BOXBERRY                              Carrier = "BOX_BERRY"
	BPOSTINT                              Carrier = "BPOST_INT"
	BRACORREIOS                           Carrier = "BRA_CORREIOS"
	BRING                                 Carrier = "BRING"
	BROUWERTRANSPORT                      Carrier = "BROUWER_TRANSPORT"
	BRTIT                                 Carrier = "BRT_IT"
	BRTITPARCELID                         Carrier = "BRT_IT_PARCELID"
	BRTITSENDERREF                        Carrier = "BRT_IT_SENDER_REF"
	BTWOCEUROPE                           Carrier = "B_TWO_C_EUROPE"
	BUDBEEWEBHOOK                         Carrier = "BUDBEE_WEBHOOK"
	BUYLOGIC                              Carrier = "BUYLOGIC"
	CACANADAPOST                          Carrier = "CA_CANADA_POST"
	CACANPAR                              Carrier = "CA_CANPAR"
	CAEDELIVERS                           Carrier = "CAE_DELIVERS"
	CAGREYHOUND                           Carrier = "CA_GREYHOUND"
	CAINIAO                               Carrier = "CAINIAO"
	CAPUROLATOR                           Carrier = "CA_PUROLATOR"
	CARIBOU                               Carrier = "CARIBOU"
	CARRIERS                              Carrier = "CARRIERS"
	CARRYFLAP                             Carrier = "CARRY_FLAP"
	CBLLOGISTICA                          Carrier = "CBL_LOGISTICA"
	CDEK                                  Carrier = "CDEK"
	CDEKTR                                Carrier = "CDEK_TR"
	CELERITAS                             Carrier = "CELERITAS"
	CELLOSQUARE                           Carrier = "CELLO_SQUARE"
	CESKACZ                               Carrier = "CESKA_CZ"
	CEVA                                  Carrier = "CEVA"
	CFLLOGISTICS                          Carrier = "CFL_LOGISTICS"
	CGSEXPRESS                            Carrier = "CGS_EXPRESS"
	CHAMPIONLOGISTICS                     Carrier = "CHAMPION_LOGISTICS"
	CHITCHATS                             Carrier = "CHITCHATS"
	CHOIREXP                              Carrier = "CHOIR_EXP"
	CHROBINSON                            Carrier = "CHROBINSON"
	CHRONOPOSTFR                          Carrier = "CHRONOPOST_FR"
	CHSWISSPOSTPRIORITY                   Carrier = "CH_SWISS_POST_PRIORITY"
	CHUKOU1                               Carrier = "CHUKOU1"
	CITYLINKMY                            Carrier = "CITYLINK_MY"
	CJCENTURY                             Carrier = "CJ_CENTURY"
	CJGLS                                 Carrier = "CJ_GLS"
	CJHKINTERNATIONAL                     Carrier = "CJ_HK_INTERNATIONAL"
	CJINTMY                               Carrier = "CJ_INT_MY"
	CJKR                                  Carrier = "CJ_KR"
	CJLOGISTICS                           Carrier = "CJ_LOGISTICS"
	CJPACKET                              Carrier = "CJPACKET"
	CJTH                                  Carrier = "CJ_TH"
	CLELOGISTICS                          Carrier = "CLE_LOGISTICS"
	CLEVYLINKS                            Carrier = "CLEVY_LINKS"
	CLOUDWISHASIA                         Carrier = "CLOUDWISH_ASIA"
	CN17POST                              Carrier = "CN_17POST"
	CNBESTEXPRESS                         Carrier = "CN_BESTEXPRESS"
	CNBOXC                                Carrier = "CN_BOXC"
	CNCHINAPOSTEMS                        Carrier = "CN_CHINA_POST_EMS"
	CNDEXPRESS                            Carrier = "CNDEXPRESS"
	CNDPEX                                Carrier = "CN_DPEX"
	CNEMS                                 Carrier = "CN_EMS"
	CNEQUICK                              Carrier = "CN_EQUICK"
	CNEXPS                                Carrier = "CNEXPS"
	CNJCEX                                Carrier = "CN_JCEX"
	CNPAYPALPACKAGE                       Carrier = "CN_PAYPAL_PACKAGE"
	CNPOST56                              Carrier = "CN_POST56"
	CNSFEXPRESS                           Carrier = "CN_SF_EXPRESS"
	CNSTO                                 Carrier = "CN_STO"
	CNWANGTONG                            Carrier = "CNWANGTONG"
	CNWEDO                                Carrier = "CN_WEDO"
	CNWISHPOST                            Carrier = "CN_WISHPOST"
	CNYUNDA                               Carrier = "CN_YUNDA"
	COLISPRIVE                            Carrier = "COLIS_PRIVE"
	COLLECTCO                             Carrier = "COLLECTCO"
	COLLIVERY                             Carrier = "COLLIVERY"
	COMETTECH                             Carrier = "COMET_TECH"
	CONTINENTAL                           Carrier = "CONTINENTAL"
	CONWAY                                Carrier = "CON_WAY"
	COORDINADORA                          Carrier = "COORDINADORA"
	COPACOURIER                           Carrier = "COPA_COURIER"
	COPE                                  Carrier = "COPE"
	CORPORATECOURIERSWEBHOOK              Carrier = "CORPORATECOURIERS_WEBHOOK"
	CORREOSDEMEXICO                       Carrier = "CORREOS_DE_MEXICO"
	CORREOSES                             Carrier = "CORREOS_ES"
	CORREOSEXPRESS                        Carrier = "CORREOS_EXPRESS"
	CORREOUY                              Carrier = "CORREO_UY"
	COSTMETICSNOW                         Carrier = "COSTMETICSNOW"
	COURANTPLUS                           Carrier = "COURANT_PLUS"
	COUREX                                Carrier = "COUREX"
	COURIERSPLEASE                        Carrier = "COURIERS_PLEASE"
	CPACKET                               Carrier = "CPACKET"
	CPEX                                  Carrier = "CPEX"
	CROSHOT                               Carrier = "CROSHOT"
	CSE                                   Carrier = "CSE"
	CTCEXPRESS                            Carrier = "CTC_EXPRESS"
	CUBYN                                 Carrier = "CUBYN"
	CUCKOOEXPRESS                         Carrier = "CUCKOOEXPRESS"
	CYPRUSPOSTCYP                         Carrier = "CYPRUS_POST_CYP"
	DAIGLOBALTRACK                        Carrier = "DAIGLOBALTRACK"
	DAJIN                                 Carrier = "DAJIN"
	DANSKEFRAGT                           Carrier = "DANSKE_FRAGT"
	DAWNWING                              Carrier = "DAWN_WING"
	DAYTONFREIGHT                         Carrier = "DAYTON_FREIGHT"
	DBSCHENKERB2B                         Carrier = "DBSCHENKER_B2B"
	DBSCHENKERSE                          Carrier = "DBSCHENKER_SE"
	DBSCHENKERSV                          Carrier = "DBSCHENKER_SV"
	DDEXPRESS                             Carrier = "DDEXPRESS"
	DEALERSEND                            Carrier = "DEALERSEND"
	DEASENDIA                             Carrier = "DE_ASENDIA"
	DEDEUTSCHE                            Carrier = "DE_DEUTSCHE"
	DEDEUTSCHEPOSTDHLWITHINEUROPETRACKNET Carrier = "DE_DEUTSCHE_POST_DHL_WITHIN_EUROPE_TRACKNET"
	DEDHLEXPRESS                          Carrier = "DE_DHL_EXPRESS"
	DEDPDDELISTRACK                       Carrier = "DE_DPD_DELISTRACK"
	DEGLS                                 Carrier = "DE_GLS"
	DELIVERYONTIME                        Carrier = "DELIVERYONTIME"
	DELNEXT                               Carrier = "DELNEXT"
	DELTECUK                              Carrier = "DELTEC_UK"
	DEMANDSHIP                            Carrier = "DEMANDSHIP"
	DESCARTES                             Carrier = "DESCARTES"
	DESIGNERTRANSPORTWEBHOOK              Carrier = "DESIGNERTRANSPORT_WEBHOOK"
	DESTINY                               Carrier = "DESTINY"
	DEXI                                  Carrier = "DEX_I"
	DHL                                   Carrier = "DHL"
	DHLACTIVETRACING                      Carrier = "DHL_ACTIVE_TRACING"
	DHLAU                                 Carrier = "DHL_AU"
	DHLBENELUX                            Carrier = "DHL_BENELUX"
	DHLECOMERCEASA                        Carrier = "DHL_ECOMERCE_ASA"
	DHLES                                 Carrier = "DHL_ES"
	DHLFR                                 Carrier = "DHL_FR"
	DHLFREIGHT                            Carrier = "DHL_FREIGHT"
	DHLGLOBALMAILASIA                     Carrier = "DHL_GLOBAL_MAIL_ASIA"
	DHLHK                                 Carrier = "DHL_HK"
	DHLJP                                 Carrier = "DHL_JP"
	DHLPARCELES                           Carrier = "DHL_PARCEL_ES"
	DHLPARCELNL                           Carrier = "DHL_PARCEL_NL"
	DHLPARCELRU                           Carrier = "DHL_PARCEL_RU"
	DHLPL                                 Carrier = "DHL_PL"
	DHLREFR                               Carrier = "DHL_REFR"
	DHLSG                                 Carrier = "DHL_SG"
	DHLSUPPLYCHAIN                        Carrier = "DHL_SUPPLY_CHAIN"
	DHLUK                                 Carrier = "DHL_UK"
	DIAMONDEUROGISTICS                    Carrier = "DIAMOND_EUROGISTICS"
	DICOM                                 Carrier = "DICOM"
	DIDADI                                Carrier = "DIDADI"
	DIMERCO                               Carrier = "DIMERCO"
	DIRECTCOURIERS                        Carrier = "DIRECTCOURIERS"
	DIRECTLOG                             Carrier = "DIRECTLOG"
	DIRECTPARCELS                         Carrier = "DIRECTPARCELS"
	DMMNETWORK                            Carrier = "DMM_NETWORK"
	DMSMATRIX                             Carrier = "DMS_MATRIX"
	DOBROPOST                             Carrier = "DOBROPOST"
	DOORA                                 Carrier = "DOORA"
	DOORDASHWEBHOOK                       Carrier = "DOORDASH_WEBHOOK"
	DPD                                   Carrier = "DPD"
	DPDDELISTRACK                         Carrier = "DPD_DELISTRACK"
	DPDFR                                 Carrier = "DPD_FR"
	DPDHGRY                               Carrier = "DPD_HGRY"
	DPDHK                                 Carrier = "DPD_HK"
	DPDIR                                 Carrier = "DPD_IR"
	DPDLOCAL                              Carrier = "DPD_LOCAL"
	DPDLOCALREF                           Carrier = "DPD_LOCAL_REF"
	DPDPOLAND                             Carrier = "DPD_POLAND"
	DPDRO                                 Carrier = "DPD_RO"
	DPDRU                                 Carrier = "DPD_RU"
	DPEEXPRESS                            Carrier = "DPE_EXPRESS"
	DPESOUTHAFRC                          Carrier = "DPE_SOUTH_AFRC"
	DPEX                                  Carrier = "DPEX"
	DSV                                   Carrier = "DSV"
	DTDCAU                                Carrier = "DTDC_AU"
	DTDCEXPRESS                           Carrier = "DTDC_EXPRESS"
	DTDCIN                                Carrier = "DTDC_IN"
	DTDEXPR                               Carrier = "DTD_EXPR"
	DXSFTP                                Carrier = "DX_SFTP"
	DYLT                                  Carrier = "DYLT"
	DYNALOGIC                             Carrier = "DYNALOGIC"
	EASYMAIL                              Carrier = "EASY_MAIL"
	ECEXPRESS                             Carrier = "ECEXPRESS"
	ECHO                                  Carrier = "ECHO"
	ECMS                                  Carrier = "ECMS"
	ECOSCOOTING                           Carrier = "ECOSCOOTING"
	EFEX                                  Carrier = "EFEX"
	EFS                                   Carrier = "EFS"
	EKART                                 Carrier = "EKART"
	ELIANPOST                             Carrier = "ELIAN_POST"
	EMPSCN                                Carrier = "EMPS_CN"
	ENDEAVOURDELIVERY                     Carrier = "ENDEAVOUR_DELIVERY"
	ENVIALIAREFERENCE                     Carrier = "ENVIALIA_REFERENCE"
	EPARCELKR                             Carrier = "EPARCEL_KR"
	EPBOX                                 Carrier = "EP_BOX"
	EPSTGLBL                              Carrier = "EPST_GLBL"
	ESHIPPING                             Carrier = "ESHIPPING"
	ESPASM                                Carrier = "ESP_ASM"
	ESPENVIALIA                           Carrier = "ESP_ENVIALIA"
	ESPMRW                                Carrier = "ESP_MRW"
	ESPNACEX                              Carrier = "ESP_NACEX"
	ESPPACKLINK                           Carrier = "ESP_PACKLINK"
	ESPREDUR                              Carrier = "ESP_REDUR"
	ETOMARS                               Carrier = "ETOMARS"
	ETOTAL                                Carrier = "ETOTAL"
	ETSEXPRESS                            Carrier = "ETS_EXPRESS"
	EUFLEETSOLUTIONS                      Carrier = "EU_FLEET_SOLUTIONS"
	EUIMX                                 Carrier = "EU_IMX"
	EXPRESSSALE                           Carrier = "EXPRESSSALE"
	FARGOOD                               Carrier = "FARGOOD"
	FARINTERNATIONAL                      Carrier = "FAR_INTERNATIONAL"
	FASTRACK                              Carrier = "FASTRACK"
	FASTRKSERV                            Carrier = "FASTRK_SERV"
	FASTWAYIR                             Carrier = "FASTWAY_IR"
	FASTWAYNZ                             Carrier = "FASTWAY_NZ"
	FDSEXPRESS                            Carrier = "FDSEXPRESS"
	FEDEX                                 Carrier = "FEDEX"
	FEDEXCROSSBORDER                      Carrier = "FEDEX_CROSSBORDER"
	FEDEXFR                               Carrier = "FEDEX_FR"
	FEDEXINTLMLSERV                       Carrier = "FEDEX_INTL_MLSERV"
	FEDEXPOLAND                           Carrier = "FEDEX_POLAND"
	FEDEXUK                               Carrier = "FEDEX_UK"
	FETCHRWEBHOOK                         Carrier = "FETCHR_WEBHOOK"
	FIEGE                                 Carrier = "FIEGE"
	FIEGENL                               Carrier = "FIEGE_NL"
	FIRSTMILE                             Carrier = "FIRSTMILE"
	FLASHEXPRESS                          Carrier = "FLASHEXPRESS"
	FMX                                   Carrier = "FMX"
	FONSEN                                Carrier = "FONSEN"
	FORRUN                                Carrier = "FORRUN"
	FRBERT                                Carrier = "FR_BERT"
	FRCOLIS                               Carrier = "FR_COLIS"
	FREIGHTQUOTE                          Carrier = "FREIGHTQUOTE"
	FRETERAPIDO                           Carrier = "FRETERAPIDO"
	FREXAPAQ                              Carrier = "FR_EXAPAQ"
	FRGEODIS                              Carrier = "FR_GEODIS"
	FRGLS                                 Carrier = "FR_GLS"
	FULFILLA                              Carrier = "FULFILLA"
	FULFILLME                             Carrier = "FULFILLME"
	FURDECO                               Carrier = "FURDECO"
	GAC                                   Carrier = "GAC"
	GANGBAO                               Carrier = "GANGBAO"
	GBA                                   Carrier = "GBA"
	GBAPC                                 Carrier = "GB_APC"
	GBARROW                               Carrier = "GB_ARROW"
	GBNORSK                               Carrier = "GB_NORSK"
	GBPANTHER                             Carrier = "GB_PANTHER"
	GBSBROKER                             Carrier = "GBS_BROKER"
	GBTUFFNELLS                           Carrier = "GB_TUFFNELLS"
	GEIS                                  Carrier = "GEIS"
	GELEXPRESS                            Carrier = "GEL_EXPRESS"
	GEMWORLDWIDE                          Carrier = "GEMWORLDWIDE"
	GENERALOVERNIGHT                      Carrier = "GENERAL_OVERNIGHT"
	GENIKIGR                              Carrier = "GENIKI_GR"
	GEODISESPACE                          Carrier = "GEODIS_ESPACE"
	GESWL                                 Carrier = "GESWL"
	GIAOHANG                              Carrier = "GIAO_HANG"
	GIOEXPRESS                            Carrier = "GIO_EXPRESS"
	GLOBALABF                             Carrier = "GLOBAL_ABF"
	GLOBALESTES                           Carrier = "GLOBAL_ESTES"
	GLOBALEXPRESS                         Carrier = "GLOBAL_EXPRESS"
	GLOBALIPARCEL                         Carrier = "GLOBAL_IPARCEL"
	GLOBALTNT                             Carrier = "GLOBAL_TNT"
	GLOBALTRANZ                           Carrier = "GLOBALTRANZ"
	GLOBAVEND                             Carrier = "GLOBAVEND"
	GLSCROTIA                             Carrier = "GLS_CROTIA"
	GLSCZ                                 Carrier = "GLS_CZ"
	GLSIT                                 Carrier = "GLS_IT"
	GLSITALY                              Carrier = "GLS_ITALY"
	GLSSLOV                               Carrier = "GLS_SLOV"
	GLSSLOVEN                             Carrier = "GLS_SLOVEN"
	GOGLOBALPOST                          Carrier = "GOGLOBALPOST"
	GOJEK                                 Carrier = "GOJEK"
	GRABWEBHOOK                           Carrier = "GRAB_WEBHOOK"
	GRELTA                                Carrier = "GR_ELTA"
	GRUPO                                 Carrier = "GRUPO"
	GSIEXPRESS                            Carrier = "GSI_EXPRESS"
	GSO                                   Carrier = "GSO"
	HAPPY2POINT                           Carrier = "HAPPY2POINT"
	HCTLOGISTICS                          Carrier = "HCT_LOGISTICS"
	HDB                                   Carrier = "HDB"
	HDBBOX                                Carrier = "HDB_BOX"
	HELLMANN                              Carrier = "HELLMANN"
	HELTHJEM                              Carrier = "HELTHJEM"
	HEPPNER                               Carrier = "HEPPNER"
	HEPPNERFR                             Carrier = "HEPPNER_FR"
	HERMES                                Carrier = "HERMES"
	HERMES2MANNHANDLING                   Carrier = "HERMES_2MANN_HANDLING"
	HERMESDE                              Carrier = "HERMES_DE"
	HHEXP                                 Carrier = "HH_EXP"
	HIPSHIPPER                            Carrier = "HIPSHIPPER"
	HKD                                   Carrier = "HKD"
	HKFLYTEXPRESS                         Carrier = "HK_FLYT_EXPRESS"
	HKFOURPXEXPRESS                       Carrier = "HK_FOUR_PX_EXPRESS"
	HKPOST                                Carrier = "HK_POST"
	HKTGX                                 Carrier = "HK_TGX"
	HOLISOL                               Carrier = "HOLISOL"
	HOMEDELIVERYSOLUTIONS                 Carrier = "HOME_DELIVERY_SOLUTIONS"
	HOUNDEXPRESS                          Carrier = "HOUNDEXPRESS"
	HRPARCEL                              Carrier = "HRPARCEL"
	HRVHRVATSKA                           Carrier = "HRV_HRVATSKA"
	HUAHANEXPRESS                         Carrier = "HUAHAN_EXPRESS"
	HUNTEREXPRESS                         Carrier = "HUNTER_EXPRESS"
	HUODULL                               Carrier = "HUODULL"
	HXEXPRESS                             Carrier = "HX_EXPRESS"
	IBEONE                                Carrier = "IBEONE"
	ICUMULUS                              Carrier = "ICUMULUS"
	IDEXPRESS                             Carrier = "IDEXPRESS"
	IDIKA                                 Carrier = "I_DIKA"
	IDNJNE                                Carrier = "IDN_JNE"
	IDNLIONPARCEL                         Carrier = "IDN_LION_PARCEL"
	IDNPANDU                              Carrier = "IDN_PANDU"
	IML                                   Carrier = "IML"
	INDBLUEDART                           Carrier = "IND_BLUEDART"
	INDDELHIVERY                          Carrier = "IND_DELHIVERY"
	INDDELIVREE                           Carrier = "IND_DELIVREE"
	INDDOTZOT                             Carrier = "IND_DOTZOT"
	INDECOM                               Carrier = "IND_ECOM"
	INDFIRSTFLIGHT                        Carrier = "IND_FIRSTFLIGHT"
	INDGATI                               Carrier = "IND_GATI"
	INDGOJAVAS                            Carrier = "IND_GOJAVAS"
	INDOPAKET                             Carrier = "INDOPAKET"
	INDPROFESSIONALCOURIERS               Carrier = "IND_PROFESSIONAL_COURIERS"
	INDSAFEEXPRESS                        Carrier = "IND_SAFEEXPRESS"
	INDXPRESSBEES                         Carrier = "IND_XPRESSBEES"
	INPOSTPACZKOMATY                      Carrier = "INPOST_PACZKOMATY"
	INTEGRA2FTP                           Carrier = "INTEGRA2_FTP"
	INTELIPOST                            Carrier = "INTELIPOST"
	INTELVALLEY                           Carrier = "INTEL_VALLEY"
	INTERPARCELAU                         Carrier = "INTERPARCEL_AU"
	INTERPARCELNZ                         Carrier = "INTERPARCEL_NZ"
	INTERPARCELUK                         Carrier = "INTERPARCEL_UK"
	INTEXPRESS                            Carrier = "INTEXPRESS"
	ISRAELPOST                            Carrier = "ISRAEL_POST"
	ISRPOSTDOMESTIC                       Carrier = "ISR_POST_DOMESTIC"
	ITDHLECOMMERCE                        Carrier = "IT_DHL_ECOMMERCE"
	ITFERCAM                              Carrier = "IT_FERCAM"
	ITNEXIVE                              Carrier = "IT_NEXIVE"
	ITPOSTEITALIA                         Carrier = "IT_POSTE_ITALIA"
	ITTNT                                 Carrier = "IT_TNT"
	IVOYWEBHOOK                           Carrier = "IVOY_WEBHOOK"
	JANCO                                 Carrier = "JANCO"
	JANIO                                 Carrier = "JANIO"
	JERSEYPOST                            Carrier = "JERSEY_POST"
	JETSHIP                               Carrier = "JET_SHIP"
	JINDOUYUN                             Carrier = "JINDOUYUN"
	JINSUNG                               Carrier = "JINSUNG"
	JNET                                  Carrier = "J_NET"
	JOCOM                                 Carrier = "JOCOM"
	JOOMLOGIS                             Carrier = "JOOM_LOGIS"
	JOYINGBOX                             Carrier = "JOYING_BOX"
	JPKURONEKOYAMATOUNYUU                 Carrier = "JP_KURO_NEKO_YAMATO_UNYUU"
	JPNJAPANPOST                          Carrier = "JPN_JAPAN_POST"
	JPNSAGAWA                             Carrier = "JPN_SAGAWA"
	JSEXPRESS                             Carrier = "JS_EXPRESS"
	JTEXPRESS                             Carrier = "JTEXPRESS"
	JTEXPRESSVN                           Carrier = "JTEXPRESS_VN"
	JX                                    Carrier = "JX"
	K1EXPRESS                             Carrier = "K1_EXPRESS"
	KANGAROOMY                            Carrier = "KANGAROO_MY"
	KEC                                   Carrier = "KEC"
	KERRYECOMMERCE                        Carrier = "KERRY_ECOMMERCE"
	KERRYTJ                               Carrier = "KERRYTJ"
	KERRYTTCVN                            Carrier = "KERRYTTC_VN"
	KGMHUB                                Carrier = "KGMHUB"
	KHMCAMBODIAPOST                       Carrier = "KHM_CAMBODIA_POST"
	KORECARGO                             Carrier = "KOR_ECARGO"
	KPOST                                 Carrier = "KPOST"
	KRKOREAPOST                           Carrier = "KR_KOREA_POST"
	KUEHNE                                Carrier = "KUEHNE"
	KURASI                                Carrier = "KURASI"
	KWEGLOBAL                             Carrier = "KWE_GLOBAL"
	KWT                                   Carrier = "KWT"
	KYEXPRESS                             Carrier = "KY_EXPRESS"
	KYUNGDONGPARCEL                       Carrier = "KYUNGDONG_PARCEL"
	LALAMOVE                              Carrier = "LALAMOVE"
	LANDMARKGLOBAL                        Carrier = "LANDMARK_GLOBAL"
	LANDMARKGLOBALREFERENCE               Carrier = "LANDMARK_GLOBAL_REFERENCE"
	LAPOSTESUIVI                          Carrier = "LA_POSTE_SUIVI"
	LATVIJASPASTS                         Carrier = "LATVIJAS_PASTS"
	LBCEXPRESSFTP                         Carrier = "LBCEXPRESS_FTP"
	LEADER                                Carrier = "LEADER"
	LEGIONEXPRESS                         Carrier = "LEGION_EXPRESS"
	LEXSHIP                               Carrier = "LEXSHIP"
	LHTEXPRESS                            Carrier = "LHT_EXPRESS"
	LICCARDIEXPRESS                       Carrier = "LICCARDI_EXPRESS"
	LIEFERY                               Carrier = "LIEFERY"
	LINE                                  Carrier = "LINE"
	LINKBRIDGE                            Carrier = "LINKBRIDGE"
	LOCUSWEBHOOK                          Carrier = "LOCUS_WEBHOOK"
	LOGISTERS                             Carrier = "LOGISTERS"
	LOGISTICSWORLDWIDEHK                  Carrier = "LOGISTICSWORLDWIDE_HK"
	LOGISTIKA                             Carrier = "LOGISTIKA"
	LOGISTYXTRANSGROUP                    Carrier = "LOGISTYX_TRANSGROUP"
	LONESTAR                              Carrier = "LONESTAR"
	LOOMISEXPRESS                         Carrier = "LOOMIS_EXPRESS"
	LOTTE                                 Carrier = "LOTTE"
	LTIANEXP                              Carrier = "LTIANEXP"
	LTL                                   Carrier = "LTL"
	LTULIETUVOS                           Carrier = "LTU_LIETUVOS"
	MAGYARHU                              Carrier = "MAGYAR_HU"
	MAILAMERICAS                          Carrier = "MAILAMERICAS"
	MAILPLUS                              Carrier = "MAIL_PLUS"
	MAILPLUSJPN                           Carrier = "MAILPLUS_JPN"
	MAINFREIGHT                           Carrier = "MAINFREIGHT"
	MAINWAY                               Carrier = "MAINWAY"
	MATDESPATCH                           Carrier = "MATDESPATCH"
	MATKAHUOLTO                           Carrier = "MATKAHUOLTO"
	MBW                                   Carrier = "MBW"
	MEXAEROFLASH                          Carrier = "MEX_AEROFLASH"
	MEXESTAFETA                           Carrier = "MEX_ESTAFETA"
	MEXREDPACK                            Carrier = "MEX_REDPACK"
	MEXSENDA                              Carrier = "MEX_SENDA"
	MGLOBAL                               Carrier = "MGLOBAL"
	MIKROPAKKET                           Carrier = "MIKROPAKKET"
	MIKROPAKKETBE                         Carrier = "MIKROPAKKET_BE"
	MILKMAN                               Carrier = "MILKMAN"
	MORELINK                              Carrier = "MORE_LINK"
	MORNINGEXPRESS                        Carrier = "MORNING_EXPRESS"
	MRWFTP                                Carrier = "MRW_FTP"
	MXCARGO                               Carrier = "MX_CARGO"
	MXE                                   Carrier = "MXE"
	MXPRESS                               Carrier = "M_XPRESS"
	MYHERMES                              Carrier = "MYHERMES"
	MYSAIRPAK                             Carrier = "MYS_AIRPAK"
	MYSEMS                                Carrier = "MYS_EMS"
	MYSGDEX                               Carrier = "MYS_GDEX"
	MYSMYPOSTONLINE                       Carrier = "MYS_MYPOST_ONLINE"
	MYSMYSPOST                            Carrier = "MYS_MYS_POST"
	MYSSKYNET                             Carrier = "MYS_SKYNET"
	N2EBOX                                Carrier = "2EBOX"
	N360LION                              Carrier = "360LION"
	N3JMSLOGISTICS                        Carrier = "3JMSLOGISTICS"
	N472                                  Carrier = "4_72"
	N6LS                                  Carrier = "6LS"
	NACEX                                 Carrier = "NACEX"
	NACEXES                               Carrier = "NACEX_ES"
	NANJINGWOYUAN                         Carrier = "NANJINGWOYUAN"
	NATIONALSAMEDAY                       Carrier = "NATIONAL_SAMEDAY"
	NATIONEX                              Carrier = "NATIONEX"
	NATIONWIDEMY                          Carrier = "NATIONWIDE_MY"
	NEWAY                                 Carrier = "NEWAY"
	NEWEGGEXPRESS                         Carrier = "NEWEGGEXPRESS"
	NEWGISTICS                            Carrier = "NEWGISTICS"
	NEWZEALANDCOURIERS                    Carrier = "NEWZEALAND_COURIERS"
	NGCOURIERPLUS                         Carrier = "NG_COURIERPLUS"
	NHANSSOLUTIONS                        Carrier = "NHANS_SOLUTIONS"
	NIMEXPRESS                            Carrier = "NIM_EXPRESS"
	NINJAVANMY                            Carrier = "NINJAVAN_MY"
	NINJAVANSG                            Carrier = "NINJAVAN_SG"
	NINJAVANTHAI                          Carrier = "NINJAVAN_THAI"
	NINJAVANWB                            Carrier = "NINJAVAN_WB"
	NIPOSTNG                              Carrier = "NIPOST_NG"
	NLDDHL                                Carrier = "NLD_DHL"
	NLDGLS                                Carrier = "NLD_GLS"
	NLDPOSTNL                             Carrier = "NLD_POSTNL"
	NLDTRANSMISSION                       Carrier = "NLD_TRANSMISSION"
	NOVAPOSHTA                            Carrier = "NOVA_POSHTA"
	NOVAPOSHTAINT                         Carrier = "NOVA_POSHTA_INT"
	NOXNACHTEXPRESS                       Carrier = "NOX_NACHTEXPRESS"
	NOXNIGHTTIMEEXPRESS                   Carrier = "NOX_NIGHT_TIME_EXPRESS"
	NTLOGISTICSVN                         Carrier = "NTLOGISTICS_VN"
	NZCOURIERPOST                         Carrier = "NZ_COURIER_POST"
	NZNZPOST                              Carrier = "NZ_NZ_POST"
	OCS                                   Carrier = "OCS"
	OCSWORLDWIDE                          Carrier = "OCS_WORLDWIDE"
	OKAYPARCEL                            Carrier = "OKAYPARCEL"
	OMNIPARCEL                            Carrier = "OMNIPARCEL"
	OMNIVA                                Carrier = "OMNIVA"
	ONECLICK                              Carrier = "ONECLICK"
	ONEWORLDEXPRESS                       Carrier = "ONEWORLDEXPRESS"
	ORANGEDS                              Carrier = "ORANGE_DS"
	OSMWORLDWIDE                          Carrier = "OSM_WORLDWIDE"
	OVERSEEXP                             Carrier = "OVERSE_EXP"
	P2PTRC                                Carrier = "P2P_TRC"
	PAACKWEBHOOK                          Carrier = "PAACK_WEBHOOK"
	PADTF                                 Carrier = "PADTF"
	PAGO                                  Carrier = "PAGO"
	PALEXPRESS                            Carrier = "PALEXPRESS"
	PALLETNETWORK                         Carrier = "PALLET_NETWORK"
	PALLETWAYS                            Carrier = "PALLETWAYS"
	PANASIA                               Carrier = "PAN_ASIA"
	PANTHERREFERENCE                      Carrier = "PANTHER_REFERENCE"
	PAPEREXPRESS                          Carrier = "PAPER_EXPRESS"
	PAPERFLY                              Carrier = "PAPERFLY"
	PAQUETEXPRESS                         Carrier = "PAQUETEXPRESS"
	PARCEL2GO                             Carrier = "PARCEL2GO"
	PARCEL2POST                           Carrier = "PARCEL_2_POST"
	PARCELINKLOGISTICS                    Carrier = "PARCELINKLOGISTICS"
	PARCELLEDIN                           Carrier = "PARCELLED_IN"
	PARCELONE                             Carrier = "PARCELONE"
	PARCELPALWEBHOOK                      Carrier = "PARCELPAL_WEBHOOK"
	PARCELPOINT                           Carrier = "PARCELPOINT"
	PARCELPOSTSG                          Carrier = "PARCELPOST_SG"
	PARKNPARCEL                           Carrier = "PARKNPARCEL"
	PCFCORP                               Carrier = "PCFCORP"
	PFCEXPRESS                            Carrier = "PFCEXPRESS"
	PFLOGISTICS                           Carrier = "PFLOGISTICS"
	PHLAIR21                              Carrier = "PHL_AIR21"
	PHLAIRSPEED                           Carrier = "PHL_AIRSPEED"
	PHLJAMEXPRESS                         Carrier = "PHL_JAMEXPRESS"
	PICKRR                                Carrier = "PICKRR"
	PICKUP                                Carrier = "PICKUP"
	PICKUPPMYS                            Carrier = "PICKUPP_MYS"
	PICKUPPSGP                            Carrier = "PICKUPP_SGP"
	PILLOGISTICS                          Carrier = "PIL_LOGISTICS"
	PILOTFREIGHT                          Carrier = "PILOT_FREIGHT"
	PITNEYBOWES                           Carrier = "PITNEY_BOWES"
	PITTOHIO                              Carrier = "PITTOHIO"
	PIXSELL                               Carrier = "PIXSELL"
	PLANZER                               Carrier = "PLANZER"
	PLPOCZTAPOLSKA                        Carrier = "PL_POCZTA_POLSKA"
	PLUSLOGUK                             Carrier = "PLUS_LOG_UK"
	POLSIODEMKA                           Carrier = "POL_SIODEMKA"
	PONYEXPRESS                           Carrier = "PONY_EXPRESS"
	POSTAPLUS                             Carrier = "POSTA_PLUS"
	POSTARO                               Carrier = "POSTA_RO"
	POSTAUKR                              Carrier = "POSTA_UKR"
	POSTENNORGE                           Carrier = "POSTEN_NORGE"
	POSTI                                 Carrier = "POSTI"
	POSTNLINT3S                           Carrier = "POSTNL_INT_3_S"
	POSTNLINTL3S                          Carrier = "POSTNL_INTL_3S"
	POSTNORDLOGISTICS                     Carrier = "POSTNORD_LOGISTICS"
	POSTNORDLOGISTICSDK                   Carrier = "POSTNORD_LOGISTICS_DK"
	POSTSERBIA                            Carrier = "POST_SERBIA"
	POSTSLOVENIA                          Carrier = "POST_SLOVENIA"
	POSTURIS                              Carrier = "POSTUR_IS"
	PRESIDENTTRANS                        Carrier = "PRESIDENT_TRANS"
	PRESSIODE                             Carrier = "PRESSIODE"
	PRIMAMULTICIPTA                       Carrier = "PRIMAMULTICIPTA"
	PROMEDDELIVERY                        Carrier = "PROMEDDELIVERY"
	PRTCHRONOPOST                         Carrier = "PRT_CHRONOPOST"
	PRTCTT                                Carrier = "PRT_CTT"
	PRTINTSEUR                            Carrier = "PRT_INT_SEUR"
	PRTSEUR                               Carrier = "PRT_SEUR"
	PTS                                   Carrier = "PTS"
	PTTPOST                               Carrier = "PTT_POST"
	QUANTIUM                              Carrier = "QUANTIUM"
	QWINTRY                               Carrier = "QWINTRY"
	RABENGROUP                            Carrier = "RABEN_GROUP"
	RAFPH                                 Carrier = "RAF_PH"
	RAIDEREX                              Carrier = "RAIDEREX"
	RAM                                   Carrier = "RAM"
	RCL                                   Carrier = "RCL"
	RINCOS                                Carrier = "RINCOS"
	RLUS                                  Carrier = "RL_US"
	ROADBULL                              Carrier = "ROADBULL"
	ROADRUNNERFREIGHT                     Carrier = "ROADRUNNER_FREIGHT"
	ROCKETPARCEL                          Carrier = "ROCKET_PARCEL"
	ROUTIFICWEBHOOK                       Carrier = "ROUTIFIC_WEBHOOK"
	ROYALMAIL                             Carrier = "ROYAL_MAIL"
	RPD2MAN                               Carrier = "RPD2MAN"
	RPX                                   Carrier = "RPX"
	RPXID                                 Carrier = "RPX_ID"
	RPXLOGISTICS                          Carrier = "RPXLOGISTICS"
	RUSSIANPOST                           Carrier = "RUSSIAN_POST"
	RUSTON                                Carrier = "RUSTON"
	RZYEXPRESS                            Carrier = "RZYEXPRESS"
	SAIAFREIGHT                           Carrier = "SAIA_FREIGHT"
	SAILPOST                              Carrier = "SAILPOST"
	SAPEXPRESS                            Carrier = "SAP_EXPRESS"
	SAUSAUDIPOST                          Carrier = "SAU_SAUDI_POST"
	SCUDEXEXPRESS                         Carrier = "SCUDEX_EXPRESS"
	SDAIT                                 Carrier = "SDA_IT"
	SDHSCM                                Carrier = "SDH_SCM"
	SEFL                                  Carrier = "SEFL"
	SEINO                                 Carrier = "SEINO"
	SEKOLOGISTICS                         Carrier = "SEKOLOGISTICS"
	SEKOSFTP                              Carrier = "SEKO_SFTP"
	SENDING                               Carrier = "SENDING"
	SENDIT                                Carrier = "SENDIT"
	SENDLE                                Carrier = "SENDLE"
	SEURES                                Carrier = "SEUR_ES"
	SEURSPAPI                             Carrier = "SEUR_SP_API"
	SFB2C                                 Carrier = "SFB2C"
	SFCLOGISTICS                          Carrier = "SFC_LOGISTICS"
	SFCSERVICE                            Carrier = "SFCSERVICE"
	SFEX                                  Carrier = "SF_EX"
	SFPLUSWEBHOOK                         Carrier = "SFPLUS_WEBHOOK"
	SGDETRACK                             Carrier = "SG_DETRACK"
	SGQXPRESS                             Carrier = "SG_QXPRESS"
	SGSGPOST                              Carrier = "SG_SG_POST"
	SGSPEEDPOST                           Carrier = "SG_SPEEDPOST"
	SGTAQBIN                              Carrier = "SG_TAQBIN"
	SHENZHEN                              Carrier = "SHENZHEN"
	SHIPENTEGRA                           Carrier = "SHIPENTEGRA"
	SHIPGATE                              Carrier = "SHIP_GATE"
	SHIPITASIA                            Carrier = "SHIP_IT_ASIA"
	SHIPPIT                               Carrier = "SHIPPIT"
	SHIPTER                               Carrier = "SHIPTER"
	SHIPTOR                               Carrier = "SHIPTOR"
	SHOPFANS                              Carrier = "SHOPFANS"
	SHREEANJANICOURIER                    Carrier = "SHREE_ANJANI_COURIER"
	SHREEMARUTI                           Carrier = "SHREE_MARUTI"
	SHREENANDANCOURIER                    Carrier = "SHREENANDANCOURIER"
	SHREETIRUPATI                         Carrier = "SHREETIRUPATI"
	SIMPLYPOST                            Carrier = "SIMPLYPOST"
	SINGLBL                               Carrier = "SIN_GLBL"
	SINOTRANS                             Carrier = "SINOTRANS"
	SKPOSTA                               Carrier = "SK_POSTA"
	SKYBOX                                Carrier = "SKYBOX"
	SKYNETUAE                             Carrier = "SKYNET_UAE"
	SKYNETUK                              Carrier = "SKYNET_UK"
	SKYNETWORLDWIDE                       Carrier = "SKYNET_WORLDWIDE"
	SKYNETZA                              Carrier = "SKYNET_ZA"
	SKYPOSTAL                             Carrier = "SKY_POSTAL"
	SMGEXPRESS                            Carrier = "SMG_EXPRESS"
	SMOOTH                                Carrier = "SMOOTH"
	SMSAEXPRESS                           Carrier = "SMSA_EXPRESS"
	SONICTL                               Carrier = "SONICTL"
	SOUTHAFRICANPOSTOFFICE                Carrier = "SOUTH_AFRICAN_POST_OFFICE"
	SPEEDCOURIERSGR                       Carrier = "SPEEDCOURIERS_GR"
	SPEEDEE                               Carrier = "SPEEDEE"
	SPEEDEXCOURIER                        Carrier = "SPEEDEXCOURIER"
	SPOTON                                Carrier = "SPOTON"
	SPRINGGDS                             Carrier = "SPRING_GDS"
	SREKOREA                              Carrier = "SRE_KOREA"
	STALLIONEXPRESS                       Carrier = "STALLIONEXPRESS"
	STARKEN                               Carrier = "STARKEN"
	STARTRACKEXPRESS                      Carrier = "STAR_TRACK_EXPRESS"
	STARTRACKNEXTFLIGHT                   Carrier = "STAR_TRACK_NEXT_FLIGHT"
	STEPFORWARDFS                         Carrier = "STEPFORWARDFS"
	STONE3PL                              Carrier = "STONE3PL"
	STRECKTRANSPORT                       Carrier = "STRECK_TRANSPORT"
	SUTTON                                Carrier = "SUTTON"
	SWEPOSTNORD                           Carrier = "SWE_POSTNORD"
	SWISHIPDE                             Carrier = "SWISHIP_DE"
	SWISSPOSTFTP                          Carrier = "SWISS_POST_FTP"
	SYPOST                                Carrier = "SYPOST"
	SZENDEX                               Carrier = "SZENDEX"
	TAQBINHK                              Carrier = "TAQBIN_HK"
	TAQBINMY                              Carrier = "TAQBIN_MY"
	TARRIVE                               Carrier = "TARRIVE"
	TAZMANIANFREIGHT                      Carrier = "TAZMANIAN_FREIGHT"
	TCKEXPRESS                            Carrier = "TCK_EXPRESS"
	TCS                                   Carrier = "TCS"
	TFM                                   Carrier = "TFM"
	TFORCEFINALMILE                       Carrier = "TFORCE_FINALMILE"
	THABITLOGISTICS                       Carrier = "THABIT_LOGISTICS"
	THADYNAMICLOGISTICS                   Carrier = "THA_DYNAMIC_LOGISTICS"
	THAKERRY                              Carrier = "THA_KERRY"
	THATHAILANDPOST                       Carrier = "THA_THAILAND_POST"
	THECOURIERGUY                         Carrier = "THECOURIERGUY"
	THEDELIVERYGROUP                      Carrier = "THEDELIVERYGROUP"
	THENILEWEBHOOK                        Carrier = "THENILE_WEBHOOK"
	TIGFREIGHT                            Carrier = "TIGFREIGHT"
	TIKIID                                Carrier = "TIKI_ID"
	TIPSA                                 Carrier = "TIPSA"
	TNT                                   Carrier = "TNT"
	TNTCLICKIT                            Carrier = "TNT_CLICK_IT"
	TNTFR                                 Carrier = "TNT_FR"
	TNTNL                                 Carrier = "TNT_NL"
	TNTREFR                               Carrier = "TNT_REFR"
	TNTUK                                 Carrier = "TNT_UK"
	TNTUKREFR                             Carrier = "TNT_UK_REFR"
	TOLL                                  Carrier = "TOLL"
	TOLLNZ                                Carrier = "TOLL_NZ"
	TOLOS                                 Carrier = "TOLOS"
	TOPHATTEREXPRESS                      Carrier = "TOPHATTEREXPRESS"
	TOPYOU                                Carrier = "TOPYOU"
	TOTALEXPRESS                          Carrier = "TOTAL_EXPRESS"
	TOURLINE                              Carrier = "TOURLINE"
	TRACKON                               Carrier = "TRACKON"
	TRANSKARGO                            Carrier = "TRANS_KARGO"
	TRUMPCARD                             Carrier = "TRUMPCARD"
	TRUNKRSWEBHOOK                        Carrier = "TRUNKRS_WEBHOOK"
	TUFFNELLSREFERENCE                    Carrier = "TUFFNELLS_REFERENCE"
	TWOGO                                 Carrier = "TWO_GO"
	TWTAIWANPOST                          Carrier = "TW_TAIWAN_POST"
	UBILOGISTICS                          Carrier = "UBI_LOGISTICS"
	UCEXPRE                               Carrier = "UC_EXPRE"
	UDS                                   Carrier = "UDS"
	UKCOLLECTPLUS                         Carrier = "UK_COLLECTPLUS"
	UKDPD                                 Carrier = "UK_DPD"
	UKNIGHTLINE                           Carrier = "UK_NIGHTLINE"
	UKPARCELFORCE                         Carrier = "UK_PARCELFORCE"
	UKUKMAIL                              Carrier = "UK_UK_MAIL"
	UKXDP                                 Carrier = "UK_XDP"
	UKYODEL                               Carrier = "UK_YODEL"
	UPS                                   Carrier = "UPS"
	UPSFREIGHT                            Carrier = "UPS_FREIGHT"
	UPSMAILINNOVATIONS                    Carrier = "UPS_MAIL_INNOVATIONS"
	UPSREFERENCE                          Carrier = "UPS_REFERENCE"
	USFREDDAWAY                           Carrier = "USF_REDDAWAY"
	USGLOBEGISTICS                        Carrier = "US_GLOBEGISTICS"
	USHIP                                 Carrier = "USHIP"
	USLASERSHIP                           Carrier = "US_LASERSHIP"
	USOLDDOMINION                         Carrier = "US_OLD_DOMINION"
	USONTRAC                              Carrier = "US_ONTRAC"
	USPS                                  Carrier = "USPS"
	USYRC                                 Carrier = "US_YRC"
	VAMOX                                 Carrier = "VAMOX"
	VENIPAK                               Carrier = "VENIPAK"
	VIAEUROPE                             Carrier = "VIAEUROPE"
	VIAEXPRESS                            Carrier = "VIA_EXPRESS"
	VIRTRANSPORT                          Carrier = "VIRTRANSPORT"
	VIWO                                  Carrier = "VIWO"
	VNMVIETNAMPOST                        Carrier = "VNM_VIETNAM_POST"
	VNMVIETTELPOST                        Carrier = "VNM_VIETTELPOST"
	WAHANAID                              Carrier = "WAHANA_ID"
	WANBEXPRESS                           Carrier = "WANBEXPRESS"
	WEASHIP                               Carrier = "WEASHIP"
	WEPOST                                Carrier = "WEPOST"
	WESTBANKCOURIER                       Carrier = "WESTBANK_COURIER"
	WESTGATEGL                            Carrier = "WESTGATE_GL"
	WHISTL                                Carrier = "WHISTL"
	WINIT                                 Carrier = "WINIT"
	WISEEXPRESS                           Carrier = "WISE_EXPRESS"
	WISELOADS                             Carrier = "WISELOADS"
	WIZMO                                 Carrier = "WIZMO"
	WMG                                   Carrier = "WMG"
	WNDIRECT                              Carrier = "WNDIRECT"
	WYNGS                                 Carrier = "WYNGS"
	XDEWEBHOOK                            Carrier = "XDE_WEBHOOK"
	XDPUKREFERENCE                        Carrier = "XDP_UK_REFERENCE"
	XLEXPRESS                             Carrier = "XL_EXPRESS"
	XPERTDELIVERY                         Carrier = "XPERT_DELIVERY"
	XPOLOGISTICS                          Carrier = "XPO_LOGISTICS"
	XPOST                                 Carrier = "XPOST"
	XPRESSENDK                            Carrier = "XPRESSEN_DK"
	XQEXPRESS                             Carrier = "XQ_EXPRESS"
	YAKIT                                 Carrier = "YAKIT"
	YANWEN                                Carrier = "YANWEN"
	YDHEXPRESS                            Carrier = "YDH_EXPRESS"
	YINGNUOLOGISTICS                      Carrier = "YINGNUO_LOGISTICS"
	YODELDIR                              Carrier = "YODEL_DIR"
	YODELINTNL                            Carrier = "YODEL_INTNL"
	YTO                                   Carrier = "YTO"
	YUNEXPRESS                            Carrier = "YUNEXPRESS"
	YURTICIKARGO                          Carrier = "YURTICI_KARGO"
	YUSEN                                 Carrier = "YUSEN"
	ZACOURIERIT                           Carrier = "ZA_COURIERIT"
	ZAFASTWAY                             Carrier = "ZA_FASTWAY"
	ZAJILEXPRESS                          Carrier = "ZAJIL_EXPRESS"
	ZASPECIALISEDFREIGHT                  Carrier = "ZA_SPECIALISED_FREIGHT"
	ZEEK2DOOR                             Carrier = "ZEEK_2_DOOR"
	ZELERIS                               Carrier = "ZELERIS"
	ZEPTOEXPRESS                          Carrier = "ZEPTO_EXPRESS"
	ZESEXPRESS                            Carrier = "ZES_EXPRESS"
	ZIINGFINALMILE                        Carrier = "ZIINGFINALMILE"
	ZINC                                  Carrier = "ZINC"
	ZJSEXPRESS                            Carrier = "ZJS_EXPRESS"
	ZTOEXPRESS                            Carrier = "ZTO_EXPRESS"
	ZYLLEM                                Carrier = "ZYLLEM"
)

// Defines values for LinkDescriptionMethod.
const (
	LinkDescriptionMethodCONNECT LinkDescriptionMethod = "CONNECT"
	LinkDescriptionMethodDELETE  LinkDescriptionMethod = "DELETE"
	LinkDescriptionMethodGET     LinkDescriptionMethod = "GET"
	LinkDescriptionMethodHEAD    LinkDescriptionMethod = "HEAD"
	LinkDescriptionMethodOPTIONS LinkDescriptionMethod = "OPTIONS"
	LinkDescriptionMethodPATCH   LinkDescriptionMethod = "PATCH"
	LinkDescriptionMethodPOST    LinkDescriptionMethod = "POST"
	LinkDescriptionMethodPUT     LinkDescriptionMethod = "PUT"
)

// Defines values for LinkDescription2Method.
const (
	LinkDescription2MethodCONNECT LinkDescription2Method = "CONNECT"
	LinkDescription2MethodDELETE  LinkDescription2Method = "DELETE"
	LinkDescription2MethodGET     LinkDescription2Method = "GET"
	LinkDescription2MethodHEAD    LinkDescription2Method = "HEAD"
	LinkDescription2MethodOPTIONS LinkDescription2Method = "OPTIONS"
	LinkDescription2MethodPATCH   LinkDescription2Method = "PATCH"
	LinkDescription2MethodPOST    LinkDescription2Method = "POST"
	LinkDescription2MethodPUT     LinkDescription2Method = "PUT"
)

// Defines values for TrackerShipmentDirection.
const (
	FORWARD TrackerShipmentDirection = "FORWARD"
	RETURN  TrackerShipmentDirection = "RETURN"
)

// Defines values for TrackerShipmentUploader.
const (
	CONSUMER TrackerShipmentUploader = "CONSUMER"
	MERCHANT TrackerShipmentUploader = "MERCHANT"
	PARTNER  TrackerShipmentUploader = "PARTNER"
)

// Defines values for TrackingNumberType.
const (
	CARRIERPROVIDED    TrackingNumberType = "CARRIER_PROVIDED"
	E2EPARTNERPROVIDED TrackingNumberType = "E2E_PARTNER_PROVIDED"
)

// Defines values for TrackingStatus.
const (
	CANCELLED         TrackingStatus = "CANCELLED"
	COMPLETED         TrackingStatus = "COMPLETED"
	DELIVERED         TrackingStatus = "DELIVERED"
	DELIVERYDELAYED   TrackingStatus = "DELIVERY_DELAYED"
	DELIVERYFAILED    TrackingStatus = "DELIVERY_FAILED"
	DELIVERYSCHEDULED TrackingStatus = "DELIVERY_SCHEDULED"
	DROPPEDOFF        TrackingStatus = "DROPPED_OFF"
	ERROR             TrackingStatus = "ERROR"
	INPROCESS         TrackingStatus = "IN_PROCESS"
	INRETURN          TrackingStatus = "INRETURN"
	INTRANSIT         TrackingStatus = "IN_TRANSIT"
	LABELPRINTED      TrackingStatus = "LABEL_PRINTED"
	LOCALPICKUP       TrackingStatus = "LOCAL_PICKUP"
	NEW               TrackingStatus = "NEW"
	NOTSHIPPED        TrackingStatus = "NOT_SHIPPED"
	ONHOLD            TrackingStatus = "ON_HOLD"
	PICKUPFAILED      TrackingStatus = "PICKUP_FAILED"
	PROCESSED         TrackingStatus = "PROCESSED"
	RETURNED          TrackingStatus = "RETURNED"
	SHIPMENTCREATED   TrackingStatus = "SHIPMENT_CREATED"
	SHIPPED           TrackingStatus = "SHIPPED"
	UNCONFIRMED       TrackingStatus = "UNCONFIRMED"
	VOID              TrackingStatus = "VOID"
)

// BatchTrackerCollection The add tracking information for multiple PayPal transactions response details.
type BatchTrackerCollection struct {
	// Errors An array of error responses.
	Errors *ErrorList `json:"errors,omitempty"`

	// Links An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
	Links *BatchTrackerCollectionDefinitionsLinkDescriptionList `json:"links,omitempty"`

	// TrackerIdentifiers The batch header.
	TrackerIdentifiers *TrackerIdentifierList `json:"tracker_identifiers,omitempty"`
}

// BatchTrackerCollectionDefinitionsLinkDescriptionList An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
type BatchTrackerCollectionDefinitionsLinkDescriptionList = []LinkDescription

// Carrier The carrier for the shipment. Carrier information is required when tracking_number is provided. Some carriers have a global version as well as local subsidiaries. The subsidiaries are repeated over many countries and might also have an entry in the global list. Choose the carrier for your country. If the carrier is not available for your country, choose the global version of the carrier. If your carrier name is not in the list, set `carrier` to `OTHER` and set carrier name in `carrier_name_other`. For allowed values, see <a href="/docs/tracking/reference/carriers/">Carriers</a>.
type Carrier string

// DateNoTime The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.
type DateNoTime = string

// DateTime The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
type DateTime = string

// DefinitionsLinkDescriptionList An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links) that are either relevant to the issue by providing additional information or offering potential resolutions.
type DefinitionsLinkDescriptionList = []LinkDescription2

// DefinitionsTrackerIdentifierList An array of tracking IDs.
type DefinitionsTrackerIdentifierList = []TrackerIdentifier

// Error The error details.
type Error struct {
	// DebugId The PayPal internal ID. Used for correlation purposes.
	DebugId string `json:"debug_id"`

	// Details An array of additional details about the error.
	Details *ErrorDetailsList `json:"details,omitempty"`

	// InformationLink The information link, or URI, that shows detailed information about this error for the developer.
	InformationLink *string `json:"information_link,omitempty"`

	// Links An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links).
	Links *ErrorDefinitionsLinkDescriptionList `json:"links,omitempty"`

	// Message The message that describes the error.
	Message string `json:"message"`

	// Name The human-readable, unique name of the error.
	Name string `json:"name"`
}

// ErrorDefinitionsLinkDescriptionList An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links).
type ErrorDefinitionsLinkDescriptionList = []LinkDescription2

// ErrorDetails2 The error details. Required for client-side `4XX` errors.
type ErrorDetails2 struct {
	// Description The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value.
	Description *string `json:"description,omitempty"`

	// Field The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors.
	Field *string `json:"field,omitempty"`

	// Issue The unique, fine-grained application-level error code.
	Issue string `json:"issue"`

	// Links An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links) that are either relevant to the issue by providing additional information or offering potential resolutions.
	Links *DefinitionsLinkDescriptionList `json:"links,omitempty"`

	// Location The location of the field that caused the error. Value is `body`, `path`, or `query`.
	Location *string `json:"location,omitempty"`

	// Value The value of the field that caused the error.
	Value *string `json:"value,omitempty"`
}

// ErrorDetailsList An array of additional details about the error.
type ErrorDetailsList = []ErrorDetails2

// ErrorList An array of error responses.
type ErrorList = []Error

// LinkDescription A request-related [HATEOAS link](/api/rest/responses/#hateoas-links).
type LinkDescription struct {
	// Href The complete target URL. To make the related call, combine the method with this link, in [URI template format](https://tools.ietf.org/html/rfc6570). Include the `$`, `(`, and `)` characters for pre-processing. The `href` is the key HATEOAS component that links a completed call with a subsequent call.
	Href string `json:"href"`

	// Method The HTTP method required to make the related call.
	Method *LinkDescriptionMethod `json:"method,omitempty"`

	// Rel The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml).
	Rel string `json:"rel"`
}

// LinkDescriptionMethod The HTTP method required to make the related call.
type LinkDescriptionMethod string

// LinkDescription2 The request-related [HATEOAS link](/api/rest/responses/#hateoas-links) information.
type LinkDescription2 struct {
	// Href The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call.
	Href string `json:"href"`

	// Method The HTTP method required to make the related call.
	Method *LinkDescription2Method `json:"method,omitempty"`

	// Rel The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml).
	Rel string `json:"rel"`
}

// LinkDescription2Method The HTTP method required to make the related call.
type LinkDescription2Method string

// LinkDescriptionList An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
type LinkDescriptionList = []LinkDescription

// Tracker The tracking information for a shipment.
type Tracker struct {
	// AccountId Encrypted PayPal Account ID of the buyer or seller.
	AccountId *string `json:"account_id,omitempty"`

	// Carrier The carrier for the shipment. Carrier information is required when tracking_number is provided. Some carriers have a global version as well as local subsidiaries. The subsidiaries are repeated over many countries and might also have an entry in the global list. Choose the carrier for your country. If the carrier is not available for your country, choose the global version of the carrier. If your carrier name is not in the list, set `carrier` to `OTHER` and set carrier name in `carrier_name_other`. For allowed values, see <a href="/docs/tracking/reference/carriers/">Carriers</a>.
	Carrier *Carrier `json:"carrier,omitempty"`

	// CarrierNameOther The name of the carrier for the shipment. Provide this value only if the carrier parameter is OTHER.
	CarrierNameOther *string `json:"carrier_name_other,omitempty"`

	// LastUpdatedTime The date and time, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). Seconds are required while fractional seconds are optional.<blockquote><strong>Note:</strong> The regular expression provides guidance but does not reject all invalid dates.</blockquote>
	LastUpdatedTime *DateTime `json:"last_updated_time,omitempty"`

	// Links An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
	Links *LinkDescriptionList `json:"links,omitempty"`

	// NotifyBuyer If true , sends an email notification to the buyer of the PayPal transaction. The email contains the tracking information that was uploaded through the API.
	NotifyBuyer *bool `json:"notify_buyer,omitempty"`

	// PostagePaymentId The postage payment ID.
	PostagePaymentId *string `json:"postage_payment_id,omitempty"`

	// Quantity The quantity of items shipped.
	Quantity *int `json:"quantity,omitempty"`

	// ShipmentDate The stand-alone date, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). To represent special legal values, such as a date of birth, you should use dates with no associated time or time-zone data. Whenever possible, use the standard `date_time` type. This regular expression does not validate all dates. For example, February 31 is valid and nothing is known about leap years.
	ShipmentDate *DateNoTime `json:"shipment_date,omitempty"`

	// ShipmentDirection To denote whether the shipment is sent forward to the receiver or returned back.
	ShipmentDirection *TrackerShipmentDirection `json:"shipment_direction,omitempty"`

	// ShipmentUploader To denote which party uploaded the shipment tracking info.
	ShipmentUploader *TrackerShipmentUploader `json:"shipment_uploader,omitempty"`

	// Status The status of the item shipment. For allowed values, see <a href="/docs/tracking/reference/shipping-status/">Shipping Statuses</a>.
	Status TrackingStatus `json:"status"`

	// TrackingNumber The tracking number for the shipment. Carrier information, `carrier` is required if tracking_number is provided.
	TrackingNumber *string `json:"tracking_number,omitempty"`

	// TrackingNumberType The tracking number type.
	TrackingNumberType *TrackingNumberType `json:"tracking_number_type,omitempty"`

	// TrackingNumberValidated Indicates whether the carrier validated the tracking number.
	TrackingNumberValidated *bool `json:"tracking_number_validated,omitempty"`

	// TrackingUrl Tracking Link of the shipment.
	TrackingUrl *string `json:"tracking_url,omitempty"`

	// TransactionId The PayPal transaction ID.
	TransactionId string `json:"transaction_id"`
}

// TrackerShipmentDirection To denote whether the shipment is sent forward to the receiver or returned back.
type TrackerShipmentDirection string

// TrackerShipmentUploader To denote which party uploaded the shipment tracking info.
type TrackerShipmentUploader string

// TrackerCollection The add tracking information for one or more transactions response details.
type TrackerCollection struct {
	// Links An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
	Links *LinkDescriptionList `json:"links,omitempty"`

	// Trackers An array of tracking information for shipments.
	Trackers *TrackerList `json:"trackers,omitempty"`
}

// TrackerIdentifier The tracking identifiers for a shipment.
type TrackerIdentifier struct {
	// Links An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
	Links *LinkDescriptionList `json:"links,omitempty"`

	// TrackingNumber The tracking number for the shipment.
	TrackingNumber *string `json:"tracking_number,omitempty"`

	// TransactionId The PayPal transaction ID.
	TransactionId string `json:"transaction_id"`
}

// TrackerIdentifierCollection The add tracking information for a PayPal transaction response details.
type TrackerIdentifierCollection struct {
	// Links An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
	Links *TrackerIdentifierCollectionDefinitionsLinkDescriptionList `json:"links,omitempty"`

	// TrackerIdentifiers An array of tracking IDs.
	TrackerIdentifiers *DefinitionsTrackerIdentifierList `json:"tracker_identifiers,omitempty"`
}

// TrackerIdentifierCollectionDefinitionsLinkDescriptionList An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
type TrackerIdentifierCollectionDefinitionsLinkDescriptionList = []LinkDescription

// TrackerIdentifierList The batch header.
type TrackerIdentifierList = []TrackerIdentifier

// TrackerList An array of tracking information for shipments.
type TrackerList = []Tracker

// TrackingNumberType The tracking number type.
type TrackingNumberType string

// TrackingStatus The status of the item shipment. For allowed values, see <a href="/docs/tracking/reference/shipping-status/">Shipping Statuses</a>.
type TrackingStatus string

// AccountId defines model for account_id.
type AccountId = string

// Id defines model for id.
type Id = string

// TrackingNumber defines model for tracking_number.
type TrackingNumber = string

// TransactionId defines model for transaction_id.
type TransactionId = string

// TrackersBatchGetParams defines parameters for TrackersBatchGet.
type TrackersBatchGetParams struct {
	// TransactionId Filters the tracking information that appears in the response by a PayPal transaction ID.
	TransactionId TransactionId `form:"transaction_id" json:"transaction_id"`

	// TrackingNumber Filters the tracking information that appears in the response by a tracking number.
	TrackingNumber *TrackingNumber `form:"tracking_number,omitempty" json:"tracking_number,omitempty"`

	// AccountId Encrypted PayPal Account ID of the buyer or seller.
	AccountId *AccountId `form:"account_id,omitempty" json:"account_id,omitempty"`
}

// TrackersGetParams defines parameters for TrackersGet.
type TrackersGetParams struct {
	// AccountId Encrypted PayPal Account ID of the buyer or seller.
	AccountId *AccountId `form:"account_id,omitempty" json:"account_id,omitempty"`
}

// TrackersPostJSONRequestBody defines body for TrackersPost for application/json ContentType.
type TrackersPostJSONRequestBody = TrackerCollection

// TrackersBatchPostJSONRequestBody defines body for TrackersBatchPost for application/json ContentType.
type TrackersBatchPostJSONRequestBody = TrackerCollection

// TrackersPutJSONRequestBody defines body for TrackersPut for application/json ContentType.
type TrackersPutJSONRequestBody = Tracker

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List tracking information
	// (GET /v1/shipping/trackers)
	TrackersBatchGet(w http.ResponseWriter, r *http.Request, params TrackersBatchGetParams)
	// Add tracking information for PayPal transaction
	// (POST /v1/shipping/trackers)
	TrackersPost(w http.ResponseWriter, r *http.Request)
	// Add tracking information for multiple PayPal transactions
	// (POST /v1/shipping/trackers-batch)
	TrackersBatchPost(w http.ResponseWriter, r *http.Request)
	// Show tracking information
	// (GET /v1/shipping/trackers/{id})
	TrackersGet(w http.ResponseWriter, r *http.Request, id Id, params TrackersGetParams)
	// Update or cancel tracking information for PayPal transaction
	// (PUT /v1/shipping/trackers/{id})
	TrackersPut(w http.ResponseWriter, r *http.Request, id Id)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// TrackersBatchGet operation middleware
func (siw *ServerInterfaceWrapper) TrackersBatchGet(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"https://uri.paypal.com/services/shipping/trackers/read", "https://uri.paypal.com/services/shipping/trackers/readwrite"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params TrackersBatchGetParams

	// ------------- Required query parameter "transaction_id" -------------

	if paramValue := r.URL.Query().Get("transaction_id"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "transaction_id"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "transaction_id", r.URL.Query(), &params.TransactionId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "transaction_id", Err: err})
		return
	}

	// ------------- Optional query parameter "tracking_number" -------------

	err = runtime.BindQueryParameter("form", true, false, "tracking_number", r.URL.Query(), &params.TrackingNumber)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tracking_number", Err: err})
		return
	}

	// ------------- Optional query parameter "account_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_id", r.URL.Query(), &params.AccountId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "account_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TrackersBatchGet(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TrackersPost operation middleware
func (siw *ServerInterfaceWrapper) TrackersPost(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"https://uri.paypal.com/services/shipping/trackers/readwrite"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TrackersPost(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TrackersBatchPost operation middleware
func (siw *ServerInterfaceWrapper) TrackersBatchPost(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"https://uri.paypal.com/services/shipping/trackers/readwrite"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TrackersBatchPost(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TrackersGet operation middleware
func (siw *ServerInterfaceWrapper) TrackersGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"https://uri.paypal.com/services/shipping/trackers/read", "https://uri.paypal.com/services/shipping/trackers/readwrite"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params TrackersGetParams

	// ------------- Optional query parameter "account_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "account_id", r.URL.Query(), &params.AccountId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "account_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TrackersGet(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// TrackersPut operation middleware
func (siw *ServerInterfaceWrapper) TrackersPut(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"https://uri.paypal.com/services/shipping/trackers/readwrite"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.TrackersPut(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/v1/shipping/trackers", wrapper.TrackersBatchGet)
	m.HandleFunc("POST "+options.BaseURL+"/v1/shipping/trackers", wrapper.TrackersPost)
	m.HandleFunc("POST "+options.BaseURL+"/v1/shipping/trackers-batch", wrapper.TrackersBatchPost)
	m.HandleFunc("GET "+options.BaseURL+"/v1/shipping/trackers/{id}", wrapper.TrackersGet)
	m.HandleFunc("PUT "+options.BaseURL+"/v1/shipping/trackers/{id}", wrapper.TrackersPut)

	return m
}

type TrackersBatchGetRequestObject struct {
	Params TrackersBatchGetParams
}

type TrackersBatchGetResponseObject interface {
	VisitTrackersBatchGetResponse(w http.ResponseWriter) error
}

type TrackersBatchGet200JSONResponse Tracker

func (response TrackersBatchGet200JSONResponse) VisitTrackersBatchGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TrackersBatchGetdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response TrackersBatchGetdefaultJSONResponse) VisitTrackersBatchGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type TrackersPostRequestObject struct {
	Body *TrackersPostJSONRequestBody
}

type TrackersPostResponseObject interface {
	VisitTrackersPostResponse(w http.ResponseWriter) error
}

type TrackersPost200JSONResponse TrackerIdentifierCollection

func (response TrackersPost200JSONResponse) VisitTrackersPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TrackersPostdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response TrackersPostdefaultJSONResponse) VisitTrackersPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type TrackersBatchPostRequestObject struct {
	Body *TrackersBatchPostJSONRequestBody
}

type TrackersBatchPostResponseObject interface {
	VisitTrackersBatchPostResponse(w http.ResponseWriter) error
}

type TrackersBatchPost200JSONResponse BatchTrackerCollection

func (response TrackersBatchPost200JSONResponse) VisitTrackersBatchPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TrackersBatchPost400Response struct {
}

func (response TrackersBatchPost400Response) VisitTrackersBatchPostResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type TrackersBatchPost403Response struct {
}

func (response TrackersBatchPost403Response) VisitTrackersBatchPostResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type TrackersBatchPost404Response struct {
}

func (response TrackersBatchPost404Response) VisitTrackersBatchPostResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type TrackersBatchPost500Response struct {
}

func (response TrackersBatchPost500Response) VisitTrackersBatchPostResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type TrackersBatchPostdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response TrackersBatchPostdefaultJSONResponse) VisitTrackersBatchPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type TrackersGetRequestObject struct {
	Id     Id `json:"id"`
	Params TrackersGetParams
}

type TrackersGetResponseObject interface {
	VisitTrackersGetResponse(w http.ResponseWriter) error
}

type TrackersGet200JSONResponse Tracker

func (response TrackersGet200JSONResponse) VisitTrackersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type TrackersGetdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response TrackersGetdefaultJSONResponse) VisitTrackersGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type TrackersPutRequestObject struct {
	Id   Id `json:"id"`
	Body *TrackersPutJSONRequestBody
}

type TrackersPutResponseObject interface {
	VisitTrackersPutResponse(w http.ResponseWriter) error
}

type TrackersPut204Response struct {
}

func (response TrackersPut204Response) VisitTrackersPutResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type TrackersPutdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response TrackersPutdefaultJSONResponse) VisitTrackersPutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List tracking information
	// (GET /v1/shipping/trackers)
	TrackersBatchGet(ctx context.Context, request TrackersBatchGetRequestObject) (TrackersBatchGetResponseObject, error)
	// Add tracking information for PayPal transaction
	// (POST /v1/shipping/trackers)
	TrackersPost(ctx context.Context, request TrackersPostRequestObject) (TrackersPostResponseObject, error)
	// Add tracking information for multiple PayPal transactions
	// (POST /v1/shipping/trackers-batch)
	TrackersBatchPost(ctx context.Context, request TrackersBatchPostRequestObject) (TrackersBatchPostResponseObject, error)
	// Show tracking information
	// (GET /v1/shipping/trackers/{id})
	TrackersGet(ctx context.Context, request TrackersGetRequestObject) (TrackersGetResponseObject, error)
	// Update or cancel tracking information for PayPal transaction
	// (PUT /v1/shipping/trackers/{id})
	TrackersPut(ctx context.Context, request TrackersPutRequestObject) (TrackersPutResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// TrackersBatchGet operation middleware
func (sh *strictHandler) TrackersBatchGet(w http.ResponseWriter, r *http.Request, params TrackersBatchGetParams) {
	var request TrackersBatchGetRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TrackersBatchGet(ctx, request.(TrackersBatchGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TrackersBatchGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TrackersBatchGetResponseObject); ok {
		if err := validResponse.VisitTrackersBatchGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TrackersPost operation middleware
func (sh *strictHandler) TrackersPost(w http.ResponseWriter, r *http.Request) {
	var request TrackersPostRequestObject

	var body TrackersPostJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TrackersPost(ctx, request.(TrackersPostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TrackersPost")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TrackersPostResponseObject); ok {
		if err := validResponse.VisitTrackersPostResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TrackersBatchPost operation middleware
func (sh *strictHandler) TrackersBatchPost(w http.ResponseWriter, r *http.Request) {
	var request TrackersBatchPostRequestObject

	var body TrackersBatchPostJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TrackersBatchPost(ctx, request.(TrackersBatchPostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TrackersBatchPost")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TrackersBatchPostResponseObject); ok {
		if err := validResponse.VisitTrackersBatchPostResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TrackersGet operation middleware
func (sh *strictHandler) TrackersGet(w http.ResponseWriter, r *http.Request, id Id, params TrackersGetParams) {
	var request TrackersGetRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TrackersGet(ctx, request.(TrackersGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TrackersGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TrackersGetResponseObject); ok {
		if err := validResponse.VisitTrackersGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// TrackersPut operation middleware
func (sh *strictHandler) TrackersPut(w http.ResponseWriter, r *http.Request, id Id) {
	var request TrackersPutRequestObject

	request.Id = id

	var body TrackersPutJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.TrackersPut(ctx, request.(TrackersPutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "TrackersPut")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(TrackersPutResponseObject); ok {
		if err := validResponse.VisitTrackersPutResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
