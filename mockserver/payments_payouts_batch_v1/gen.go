//go:build go1.22

// Package srv provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package srv

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	Oauth2Scopes = "Oauth2.Scopes"
)

// Defines values for BatchEnum.
const (
	BatchEnumCANCELED   BatchEnum = "CANCELED"
	BatchEnumDENIED     BatchEnum = "DENIED"
	BatchEnumPENDING    BatchEnum = "PENDING"
	BatchEnumPROCESSING BatchEnum = "PROCESSING"
	BatchEnumSUCCESS    BatchEnum = "SUCCESS"
)

// Defines values for FundingSource.
const (
	BALANCE FundingSource = "BALANCE"
)

// Defines values for LinkDescriptionMethod.
const (
	CONNECT LinkDescriptionMethod = "CONNECT"
	DELETE  LinkDescriptionMethod = "DELETE"
	GET     LinkDescriptionMethod = "GET"
	HEAD    LinkDescriptionMethod = "HEAD"
	OPTIONS LinkDescriptionMethod = "OPTIONS"
	PATCH   LinkDescriptionMethod = "PATCH"
	POST    LinkDescriptionMethod = "POST"
	PUT     LinkDescriptionMethod = "PUT"
)

// Defines values for PurposeEnum.
const (
	AWARDS             PurposeEnum = "AWARDS"
	CASHBACK           PurposeEnum = "CASHBACK"
	DISCOUNTS          PurposeEnum = "DISCOUNTS"
	DONATIONS          PurposeEnum = "DONATIONS"
	GOODS              PurposeEnum = "GOODS"
	NONGOODSORSERVICES PurposeEnum = "NON_GOODS_OR_SERVICES"
	PRIZES             PurposeEnum = "PRIZES"
	REBATES            PurposeEnum = "REBATES"
	SERVICES           PurposeEnum = "SERVICES"
)

// Defines values for RecipientEnum.
const (
	EMAIL    RecipientEnum = "EMAIL"
	PAYPALID RecipientEnum = "PAYPAL_ID"
	PHONE    RecipientEnum = "PHONE"
)

// Defines values for RecipientWalletEnum.
const (
	PAYPAL RecipientWalletEnum = "PAYPAL"
	VENMO  RecipientWalletEnum = "VENMO"
)

// Defines values for TransactionEnum.
const (
	TransactionEnumBLOCKED   TransactionEnum = "BLOCKED"
	TransactionEnumFAILED    TransactionEnum = "FAILED"
	TransactionEnumONHOLD    TransactionEnum = "ONHOLD"
	TransactionEnumPENDING   TransactionEnum = "PENDING"
	TransactionEnumREFUNDED  TransactionEnum = "REFUNDED"
	TransactionEnumRETURNED  TransactionEnum = "RETURNED"
	TransactionEnumREVERSED  TransactionEnum = "REVERSED"
	TransactionEnumSUCCESS   TransactionEnum = "SUCCESS"
	TransactionEnumUNCLAIMED TransactionEnum = "UNCLAIMED"
)

// AlternateNotificationMethod Captures additional notification modes to reach out to the receiver regarding this payment.
type AlternateNotificationMethod struct {
	// Phone The phone number in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).
	Phone *Phone `json:"phone,omitempty"`
}

// ApplicationContext Metadata for Venmo transactions.
type ApplicationContext struct {
	// HollerUrl Link to a Holler sticker. For Venmo recipients, the sticker displays with the payout message. The maximum URL length is 151.
	// Deprecated: this property has been marked as deprecated upstream, but no `x-deprecated-reason` was set
	HollerUrl *string `json:"holler_url,omitempty"`

	// LogoUrl Link to a logo that displays as the sender's profile image in the recipient's Venmo feed. Used to add or update the business profile image. Max image size: 1024 x 1024 pixels. The image should be square and maximum URL length is 2000.
	LogoUrl *string `json:"logo_url,omitempty"`

	// SocialFeedPrivacy This attribute controls the privacy of a payout transaction in recipientâ€™s feed. PUBLIC, FRIENDS_ONLY & PRIVATE are the values that can be used. PUBLIC - The payment displays on the recipient's public Venmo feed. FRIENDS_ONLY - The payment displays only to the recipient's Venmo friends. PRIVATE - The payment displays only on the recipient's personal feed. Defaults to `PRIVATE` if left blank.
	SocialFeedPrivacy *string `json:"social_feed_privacy,omitempty"`
}

// BatchEnum The payouts status.
type BatchEnum string

// CreatePayoutRequest The create payout request.
type CreatePayoutRequest struct {
	// Items An array of individual payout items.
	Items PayoutItemRequestList `json:"items"`

	// SenderBatchHeader The sender-provided payout header for a payout request.
	SenderBatchHeader SenderBatchHeader `json:"sender_batch_header"`
}

// Currency The currency and amount for a financial transaction, such as a balance or payment due.
type Currency struct {
	// Currency The [three-character ISO-4217 currency code](/docs/integration/direct/rest/currency-codes/).
	Currency string `json:"currency"`

	// Value The value, which might be:<ul><li>An integer for currencies like `JPY` that are not typically fractional.</li><li>A decimal fraction for currencies like `TND` that are subdivided into thousandths.</li></ul>For the required number of decimal places for a currency code, see [Currency codes - ISO 4217](https://www.iso.org/iso-4217-currency-codes.html).
	Value string `json:"value"`
}

// DefinitionsLinkDescriptionList An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links).
type DefinitionsLinkDescriptionList = []LinkDescription

// Error The error details.
type Error struct {
	// DebugId The PayPal internal ID. Used for correlation purposes.
	DebugId string `json:"debug_id"`

	// Details An array of additional details about the error.
	Details *ErrorDetailsList `json:"details,omitempty"`

	// InformationLink The information link, or URI, that shows detailed information about this error for the developer.
	InformationLink *string `json:"information_link,omitempty"`

	// Links An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
	Links *LinkDescriptionList `json:"links,omitempty"`

	// Message The message that describes the error.
	Message string `json:"message"`

	// Name The human-readable, unique name of the error.
	Name string `json:"name"`
}

// ErrorDetails2 The error details. Required for client-side `4XX` errors.
type ErrorDetails2 struct {
	// Description The human-readable description for an issue. The description can change over the lifetime of an API, so clients must not depend on this value.
	Description *string `json:"description,omitempty"`

	// Field The field that caused the error. If this field is in the body, set this value to the field's JSON pointer value. Required for client-side errors.
	Field *string `json:"field,omitempty"`

	// Issue The unique, fine-grained application-level error code.
	Issue string `json:"issue"`

	// Location The location of the field that caused the error. Value is `body`, `path`, or `query`.
	Location *string `json:"location,omitempty"`

	// Value The value of the field that caused the error.
	Value *string `json:"value,omitempty"`
}

// ErrorDetailsList An array of additional details about the error.
type ErrorDetailsList = []ErrorDetails2

// FundingSource Identifies a funding source type.
type FundingSource string

// Language The [language tag](https://tools.ietf.org/html/bcp47#section-2) for the language in which to localize the error-related strings, such as messages, issues, and suggested actions. The tag is made up of the [ISO 639-2 language code](https://www.loc.gov/standards/iso639-2/php/code_list.php), the optional [ISO-15924 script tag](https://www.unicode.org/iso15924/codelists.html), and the [ISO-3166 alpha-2 country code](/docs/integration/direct/rest/country-codes/).
type Language = string

// LinkDescription The request-related [HATEOAS link](/docs/api/reference/api-responses/#hateoas-links) information.
type LinkDescription struct {
	// Href The complete target URL. To make the related call, combine the method with this [URI Template-formatted](https://tools.ietf.org/html/rfc6570) link. For pre-processing, include the `$`, `(`, and `)` characters. The `href` is the key HATEOAS component that links a completed call with a subsequent call.
	Href string `json:"href"`

	// Method The HTTP method required to make the related call.
	Method *LinkDescriptionMethod `json:"method,omitempty"`

	// Rel The [link relation type](https://tools.ietf.org/html/rfc5988#section-4), which serves as an ID for a link that unambiguously describes the semantics of the link. See [Link Relations](https://www.iana.org/assignments/link-relations/link-relations.xhtml).
	Rel string `json:"rel"`
}

// LinkDescriptionMethod The HTTP method required to make the related call.
type LinkDescriptionMethod string

// LinkDescriptionList An array of request-related [HATEOAS links](/docs/api/reference/api-responses/#hateoas-links).
type LinkDescriptionList = []LinkDescription

// Name The name of the party.
type Name struct {
	// AlternateFullName DEPRECATED. The party's alternate name. Can be a business name, nickname, or any other name that cannot be split into first, last name. Required when the party is a business.
	AlternateFullName *string `json:"alternate_full_name,omitempty"`

	// FullName When the party is a person, the party's full name.
	FullName *string `json:"full_name,omitempty"`

	// GivenName When the party is a person, the party's given, or first, name.
	GivenName *string `json:"given_name,omitempty"`

	// MiddleName When the party is a person, the party's middle name. Use also to store multiple middle names including the patronymic, or father's, middle name.
	MiddleName *string `json:"middle_name,omitempty"`

	// Prefix The prefix, or title, to the party's name.
	Prefix *string `json:"prefix,omitempty"`

	// Suffix The suffix for the party's name.
	Suffix *string `json:"suffix,omitempty"`

	// Surname When the party is a person, the party's surname or family name. Also known as the last name. Required when the party is a person. Use also to store multiple surnames including the matronymic, or mother's, surname.
	Surname *string `json:"surname,omitempty"`
}

// Payout The create payout response.
type Payout struct {
	// BatchHeader The payout header that is returned in response to a payout header request. Shows details for an entire payout request.
	BatchHeader *PayoutHeader `json:"batch_header,omitempty"`

	// Links An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links).
	Links *DefinitionsLinkDescriptionList `json:"links,omitempty"`
}

// PayoutBatch The PayPal-generated batch status.
type PayoutBatch struct {
	// BatchHeader The payout header that is returned in response to a payout header request. Shows details for an entire payout request.
	BatchHeader *PayoutBatchHeader `json:"batch_header,omitempty"`

	// Items An array of individual items.
	Items *PayoutBatchItemsList `json:"items,omitempty"`

	// Links An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links).
	Links *PayoutBatchDefinitionsLinkDescriptionList `json:"links,omitempty"`

	// TotalItems The total number of items in the full result list.
	TotalItems *int `json:"total_items,omitempty"`

	// TotalPages The total number of pages.
	TotalPages *int `json:"total_pages,omitempty"`
}

// PayoutBatchDefinitionsLinkDescriptionList An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links).
type PayoutBatchDefinitionsLinkDescriptionList = []LinkDescription

// PayoutBatchHeader The payout header that is returned in response to a payout header request. Shows details for an entire payout request.
type PayoutBatchHeader struct {
	// Amount The currency and amount for a financial transaction, such as a balance or payment due.
	Amount *Currency `json:"amount,omitempty"`

	// BatchStatus The payouts status.
	BatchStatus BatchEnum `json:"batch_status"`

	// Fees The currency and amount for a financial transaction, such as a balance or payment due.
	Fees *Currency `json:"fees,omitempty"`

	// FundingSource Identifies a funding source type.
	FundingSource *FundingSource `json:"funding_source,omitempty"`

	// PayoutBatchId The PayPal-generated ID for a payout.
	PayoutBatchId string `json:"payout_batch_id"`

	// SenderBatchHeader The sender-provided header for a payout request.
	SenderBatchHeader PayoutSenderBatchHeader `json:"sender_batch_header"`

	// TimeClosed The date and time when the payout was closed, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6). A payout is considered closed when all items in a batch are processed and the available balance from the temporary hold is released.
	TimeClosed *time.Time `json:"time_closed,omitempty"`

	// TimeCompleted The date and time when processing for the payout was completed, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
	TimeCompleted *time.Time `json:"time_completed,omitempty"`

	// TimeCreated The date and time when processing for the payout began, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
	TimeCreated *time.Time `json:"time_created,omitempty"`
}

// PayoutBatchItems The payout item status and other details.
type PayoutBatchItems struct {
	// ActivityId The unique PayPal-generated common ID created to link sender side and receiver side transaction. Used for tracking.
	ActivityId *string `json:"activity_id,omitempty"`

	// CurrencyConversion The currency conversion resource.
	CurrencyConversion *PayoutCurrencyConversion `json:"currency_conversion,omitempty"`

	// Errors The error details.
	Errors *Error `json:"errors,omitempty"`

	// Links An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links).
	Links *PayoutBatchItemsDefinitionsLinkDescriptionList `json:"links,omitempty"`

	// PayoutBatchId The PayPal-generated ID for the payout.
	PayoutBatchId string `json:"payout_batch_id"`

	// PayoutItem The details for a sender-created payout to a single recipient.
	PayoutItem PayoutItemDetail `json:"payout_item"`

	// PayoutItemFee The currency and amount for a financial transaction, such as a balance or payment due.
	PayoutItemFee *Currency `json:"payout_item_fee,omitempty"`

	// PayoutItemId The ID for the payout item. Viewable when you show details for a payout.
	PayoutItemId string `json:"payout_item_id"`

	// TimeProcessed The date and time when this item was last processed, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
	TimeProcessed *time.Time `json:"time_processed,omitempty"`

	// TransactionId The PayPal-generated ID for the transaction.
	TransactionId *string `json:"transaction_id,omitempty"`

	// TransactionStatus The item transaction status.<blockquote><strong>Note:</strong> For <code>POST/v1/payments/payouts-item/{payout_item_id}/cancel</code>, the only possible <code>transaction_status</code> value is <code>RETURNED</code>.</blockquote>
	TransactionStatus *TransactionEnum `json:"transaction_status,omitempty"`
}

// PayoutBatchItemsDefinitionsLinkDescriptionList An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links).
type PayoutBatchItemsDefinitionsLinkDescriptionList = []LinkDescription

// PayoutBatchItemsList An array of individual items.
type PayoutBatchItemsList = []PayoutBatchItems

// PayoutCurrencyConversion The currency conversion resource.
type PayoutCurrencyConversion struct {
	// ExchangeRate The exchange rate that is applied for this payout.
	ExchangeRate *string `json:"exchange_rate,omitempty"`

	// FromAmount The currency and amount for a financial transaction, such as a balance or payment due.
	FromAmount *Currency `json:"from_amount,omitempty"`

	// ToAmount The currency and amount for a financial transaction, such as a balance or payment due.
	ToAmount *Currency `json:"to_amount,omitempty"`
}

// PayoutHeader The payout header that is returned in response to a payout header request. Shows details for an entire payout request.
type PayoutHeader struct {
	// BatchStatus The payouts status.
	BatchStatus BatchEnum `json:"batch_status"`

	// PayoutBatchId The PayPal-generated ID for a payout.
	PayoutBatchId string `json:"payout_batch_id"`

	// SenderBatchHeader The sender-provided header for a payout request.
	SenderBatchHeader PayoutSenderBatchHeader `json:"sender_batch_header"`

	// TimeCreated The date and time when processing for the payout began, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
	TimeCreated *time.Time `json:"time_created,omitempty"`
}

// PayoutItem The payout item status and other details. A <code>payout_item_id</code> helps you identify denied payments. If a payment is denied, you can use the <code>payout_item_id</code> to identify the payment even if it lacks a <code>transaction_id</code>.
type PayoutItem struct {
	// ActivityId The unique PayPal-generated common ID that links the sender- and receiver-side transactions. Used for tracking.
	ActivityId *string `json:"activity_id,omitempty"`

	// CurrencyConversion The currency conversion resource.
	CurrencyConversion *PayoutCurrencyConversion `json:"currency_conversion,omitempty"`

	// Errors The error details.
	Errors *Error `json:"errors,omitempty"`

	// Links An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links).
	Links *PayoutItemDefinitionsLinkDescriptionList `json:"links,omitempty"`

	// PayoutBatchId The PayPal-generated ID for the payout batch.
	PayoutBatchId string `json:"payout_batch_id"`

	// PayoutItem The details for a sender-created payout to a single recipient.
	PayoutItem PayoutItemDetail `json:"payout_item"`

	// PayoutItemFee The currency and amount for a financial transaction, such as a balance or payment due.
	PayoutItemFee *Currency `json:"payout_item_fee,omitempty"`

	// PayoutItemId The ID for the payout item. Visible when you show details for a payout.
	PayoutItemId string `json:"payout_item_id"`

	// SenderBatchId A sender-specified ID. Tracks the payout in an accounting system. Should be unique within 30 days.
	SenderBatchId *string `json:"sender_batch_id,omitempty"`

	// TimeProcessed The date and time when this item was last processed, in [Internet date and time format](https://tools.ietf.org/html/rfc3339#section-5.6).
	TimeProcessed *time.Time `json:"time_processed,omitempty"`

	// TransactionId The PayPal-generated ID for the transaction.
	TransactionId *string `json:"transaction_id,omitempty"`

	// TransactionStatus The item transaction status.<blockquote><strong>Note:</strong> For <code>POST/v1/payments/payouts-item/{payout_item_id}/cancel</code>, the only possible <code>transaction_status</code> value is <code>RETURNED</code>.</blockquote>
	TransactionStatus *TransactionEnum `json:"transaction_status,omitempty"`
}

// PayoutItemDefinitionsLinkDescriptionList An array of request-related [HATEOAS links](/api/rest/responses/#hateoas-links).
type PayoutItemDefinitionsLinkDescriptionList = []LinkDescription

// PayoutItemDetail The details for a sender-created payout to a single recipient.
type PayoutItemDetail struct {
	// Amount The currency and amount for a financial transaction, such as a balance or payment due.
	Amount Currency `json:"amount"`

	// Note The sender-specified note for notifications. Supports up to 4000 ASCII characters and 1000 non-ASCII characters.
	Note *string `json:"note,omitempty"`

	// Purpose The purpose of the transaction.
	Purpose *PurposeEnum `json:"purpose,omitempty"`

	// Receiver The receiver of the payment. Corresponds to the `recipient_type` value in the request.
	Receiver string `json:"receiver"`

	// RecipientName The name of the party.
	RecipientName *Name `json:"recipient_name,omitempty"`

	// RecipientType The ID type that identifies the payment receiver.
	RecipientType *RecipientEnum `json:"recipient_type,omitempty"`

	// RecipientWallet The wallet where the recipient receives the payout. Payouts to Venmo recipients require a 'note' string and a US mobile phone number.
	RecipientWallet *RecipientWalletEnum `json:"recipient_wallet,omitempty"`

	// SenderItemId A sender-specified ID number. Tracks the payout in an accounting system.
	SenderItemId *string `json:"sender_item_id,omitempty"`
}

// PayoutItemRequest The sender-created payout to a recipient.
type PayoutItemRequest struct {
	// AlternateNotificationMethod Captures additional notification modes to reach out to the receiver regarding this payment.
	AlternateNotificationMethod *AlternateNotificationMethod `json:"alternate_notification_method,omitempty"`

	// Amount The currency and amount for a financial transaction, such as a balance or payment due.
	Amount Currency `json:"amount"`

	// ApplicationContext Metadata for Venmo transactions.
	ApplicationContext *ApplicationContext `json:"application_context,omitempty"`

	// Note The sender-specified note for notifications. Supports up to 4000 ASCII characters and 1000 non-ASCII characters.
	Note *string `json:"note,omitempty"`

	// NotificationLanguage The [language tag](https://tools.ietf.org/html/bcp47#section-2) for the language in which to localize the error-related strings, such as messages, issues, and suggested actions. The tag is made up of the [ISO 639-2 language code](https://www.loc.gov/standards/iso639-2/php/code_list.php), the optional [ISO-15924 script tag](https://www.unicode.org/iso15924/codelists.html), and the [ISO-3166 alpha-2 country code](/docs/integration/direct/rest/country-codes/).
	NotificationLanguage *Language `json:"notification_language,omitempty"`

	// Purpose The purpose of the transaction.
	Purpose *PurposeEnum `json:"purpose,omitempty"`

	// Receiver The receiver of the payment. Corresponds to the `recipient_type` value in the request. Max value of up to 127 single-byte characters.
	Receiver string `json:"receiver"`

	// RecipientType The recipient type. Value is:<ul><li><p><code>EMAIL</code>. The unencrypted email. Value is a string of up to 127 single-byte characters.</p></li><li><p><code>PHONE</code>. The unencrypted phone number.</p><blockquote><strong>Note:</strong> The PayPal sandbox does not support the <code>PHONE</code> recipient type.</blockquote></li><li><p><code>PAYPAL_ID</code>. The encrypted PayPal account number.</p></li><li><p><code>USER_HANDLE</code>. User handle (or) Username associated with Venmo account.</p></li></ul><br/>If the <code>sender_batch_header</code> includes the <code>recipient_type</code> attribute, payout items use the <code>recipient_type</code> of the <code>sender_batch_header</code>, unless a payout item has its own <code>recipient_type</code> attribute. If the <code>sender_batch_header</code> omits the <code>recipient_type</code> attribute, each payout item must include its own <code>recipient_type</code> value.
	RecipientType *string `json:"recipient_type,omitempty"`

	// RecipientWallet The recipient wallet.
	RecipientWallet *string `json:"recipient_wallet,omitempty"`

	// SenderItemId The sender-specified ID number. Tracks the payout in an accounting system.
	SenderItemId *string `json:"sender_item_id,omitempty"`
}

// PayoutItemRequestList An array of individual payout items.
type PayoutItemRequestList = []PayoutItemRequest

// PayoutSenderBatchHeader The sender-provided header for a payout request.
type PayoutSenderBatchHeader struct {
	// EmailMessage The email message that PayPal sends when the payout item completes. The message is the same for all recipients.
	EmailMessage *string `json:"email_message,omitempty"`

	// EmailSubject The subject line for the email that PayPal sends when payment for a payout item completes. The subject line is the same for all recipients. Value is an alphanumeric string with a maximum length of 255 single-byte characters.
	EmailSubject *string `json:"email_subject,omitempty"`

	// RecipientType The ID type that identifies the payment receiver.
	RecipientType *RecipientEnum `json:"recipient_type,omitempty"`

	// SenderBatchId The sender-specified ID number. Tracks the payout in an accounting system.<blockquote><strong>Note:</strong> <p>PayPal does not process duplicate payouts. If you specify a <code>sender_batch_id</code> that was used in the last 30 days, the API rejects the request with an error message that shows the duplicate <code>sender_batch_id</code> and includes a HATEOAS link to the original payout with the same <code>sender_batch_id</code>.</p><p>If you receive an HTTP <code>5<i>nn</i></code> status code, you can safely retry the request with the same <code>sender_batch_id</code>. The API completes a payment only once for a <code>sender_batch_id</code> that is used within 30 days.</p></blockquote>
	SenderBatchId *string `json:"sender_batch_id,omitempty"`
}

// Phone The phone number in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en).
type Phone struct {
	// CountryCode The country calling code (CC), in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the CC and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN).
	CountryCode string `json:"country_code"`

	// ExtensionNumber The extension number.
	ExtensionNumber *string `json:"extension_number,omitempty"`

	// NationalNumber The national number, in its canonical international [E.164 numbering plan format](https://www.itu.int/rec/T-REC-E.164/en). The combined length of the country calling code (CC) and the national number must not be greater than 15 digits. The national number consists of a national destination code (NDC) and subscriber number (SN).
	NationalNumber string `json:"national_number"`
}

// PurposeEnum The purpose of the transaction.
type PurposeEnum string

// RecipientEnum The ID type that identifies the payment receiver.
type RecipientEnum string

// RecipientWalletEnum The wallet where the recipient receives the payout. Payouts to Venmo recipients require a 'note' string and a US mobile phone number.
type RecipientWalletEnum string

// SenderBatchHeader The sender-provided payout header for a payout request.
type SenderBatchHeader struct {
	// EmailMessage The email message that PayPal sends when the payout item completes. The message is the same for all recipients.
	EmailMessage *string `json:"email_message,omitempty"`

	// EmailSubject The subject line for the email that PayPal sends when payment for a payout item completes. The subject line is the same for all recipients. Value is an alphanumeric string of up to 255 single-byte characters.
	EmailSubject *string `json:"email_subject,omitempty"`

	// Note The payouts and item-level notes are concatenated in the email. The maximum combined length of the notes is 1000 characters.
	Note *string `json:"note,omitempty"`

	// RecipientType The ID type that identifies the recipient of the payment. For example, <code>EMAIL</code>.
	RecipientType *string `json:"recipient_type,omitempty"`

	// SenderBatchId A sender-specified ID number. Tracks the payout in an accounting system.<blockquote><strong>Note:</strong> <p>PayPal does not process duplicate payouts. If you specify a <code>sender_batch_id</code> that was used in the last 30 days, the API rejects the request with an error message that shows the duplicate <code>sender_batch_id</code> and includes a HATEOAS link to the original payout with the same <code>sender_batch_id</code>.</p><p>If you receive an HTTP <code>5<i>nn</i></code> status code, you can safely retry the request with the same <code>sender_batch_id</code>. The API completes a payment only once for a <code>sender_batch_id</code> that is used within 30 days.</p></blockquote>
	SenderBatchId *string `json:"sender_batch_id,omitempty"`
}

// TransactionEnum The item transaction status.<blockquote><strong>Note:</strong> For <code>POST/v1/payments/payouts-item/{payout_item_id}/cancel</code>, the only possible <code>transaction_status</code> value is <code>RETURNED</code>.</blockquote>
type TransactionEnum string

// Fields defines model for fields.
type Fields = string

// Id defines model for id.
type Id = string

// Page defines model for page.
type Page = int

// PageSize defines model for page_size.
type PageSize = int

// PayoutItemId defines model for payout_item_id.
type PayoutItemId = string

// PaypalRequestId defines model for paypal_request_id.
type PaypalRequestId = string

// TotalRequired defines model for total_required.
type TotalRequired = bool

// PayoutsPostParams defines parameters for PayoutsPost.
type PayoutsPostParams struct {
	// PayPalRequestId The server stores keys for 30 days.
	PayPalRequestId *PaypalRequestId `json:"PayPal-Request-Id,omitempty"`
}

// PayoutsGetParams defines parameters for PayoutsGet.
type PayoutsGetParams struct {
	// Fields Shows details for only the specified fields.
	Fields *Fields `form:"fields,omitempty" json:"fields,omitempty"`

	// Page A non-zero integer representing the page of the results.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize The maximum number of results to return at one time. Value is a non-negative, non-zero integer. If the user chooses pagination, the maximum page is `1000`.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`

	// TotalRequired Indicates whether to show the total items and total pages count in the response.
	TotalRequired *TotalRequired `form:"total_required,omitempty" json:"total_required,omitempty"`
}

// PayoutsPostJSONRequestBody defines body for PayoutsPost for application/json ContentType.
type PayoutsPostJSONRequestBody = CreatePayoutRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create batch payout
	// (POST /v1/payments/payouts)
	PayoutsPost(w http.ResponseWriter, r *http.Request, params PayoutsPostParams)
	// Show payout item details
	// (GET /v1/payments/payouts-item/{payout_item_id})
	PayoutsItemGet(w http.ResponseWriter, r *http.Request, payoutItemId PayoutItemId)
	// Cancel unclaimed payout item
	// (POST /v1/payments/payouts-item/{payout_item_id}/cancel)
	PayoutsItemCancel(w http.ResponseWriter, r *http.Request, payoutItemId PayoutItemId)
	// Show payout batch details
	// (GET /v1/payments/payouts/{id})
	PayoutsGet(w http.ResponseWriter, r *http.Request, id Id, params PayoutsGetParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PayoutsPost operation middleware
func (siw *ServerInterfaceWrapper) PayoutsPost(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"https://uri.paypal.com/payments/payouts"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PayoutsPostParams

	headers := r.Header

	// ------------- Optional header parameter "PayPal-Request-Id" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("PayPal-Request-Id")]; found {
		var PayPalRequestId PaypalRequestId
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "PayPal-Request-Id", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithOptions("simple", "PayPal-Request-Id", valueList[0], &PayPalRequestId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "PayPal-Request-Id", Err: err})
			return
		}

		params.PayPalRequestId = &PayPalRequestId

	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PayoutsPost(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PayoutsItemGet operation middleware
func (siw *ServerInterfaceWrapper) PayoutsItemGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "payout_item_id" -------------
	var payoutItemId PayoutItemId

	err = runtime.BindStyledParameterWithOptions("simple", "payout_item_id", r.PathValue("payout_item_id"), &payoutItemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "payout_item_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"https://uri.paypal.com/payments/payouts"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PayoutsItemGet(w, r, payoutItemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PayoutsItemCancel operation middleware
func (siw *ServerInterfaceWrapper) PayoutsItemCancel(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "payout_item_id" -------------
	var payoutItemId PayoutItemId

	err = runtime.BindStyledParameterWithOptions("simple", "payout_item_id", r.PathValue("payout_item_id"), &payoutItemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "payout_item_id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"https://uri.paypal.com/payments/payouts"})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PayoutsItemCancel(w, r, payoutItemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PayoutsGet operation middleware
func (siw *ServerInterfaceWrapper) PayoutsGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2Scopes, []string{"https://uri.paypal.com/payments/payouts"})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params PayoutsGetParams

	// ------------- Optional query parameter "fields" -------------

	err = runtime.BindQueryParameter("form", true, false, "fields", r.URL.Query(), &params.Fields)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "fields", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	// ------------- Optional query parameter "total_required" -------------

	err = runtime.BindQueryParameter("form", true, false, "total_required", r.URL.Query(), &params.TotalRequired)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "total_required", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PayoutsGet(w, r, id, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/v1/payments/payouts", wrapper.PayoutsPost)
	m.HandleFunc("GET "+options.BaseURL+"/v1/payments/payouts-item/{payout_item_id}", wrapper.PayoutsItemGet)
	m.HandleFunc("POST "+options.BaseURL+"/v1/payments/payouts-item/{payout_item_id}/cancel", wrapper.PayoutsItemCancel)
	m.HandleFunc("GET "+options.BaseURL+"/v1/payments/payouts/{id}", wrapper.PayoutsGet)

	return m
}

type PayoutsPostRequestObject struct {
	Params PayoutsPostParams
	Body   *PayoutsPostJSONRequestBody
}

type PayoutsPostResponseObject interface {
	VisitPayoutsPostResponse(w http.ResponseWriter) error
}

type PayoutsPost201JSONResponse Payout

func (response PayoutsPost201JSONResponse) VisitPayoutsPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PayoutsPost400JSONResponse Error

func (response PayoutsPost400JSONResponse) VisitPayoutsPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PayoutsPost403JSONResponse Error

func (response PayoutsPost403JSONResponse) VisitPayoutsPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PayoutsPost500JSONResponse Error

func (response PayoutsPost500JSONResponse) VisitPayoutsPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PayoutsPostdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PayoutsPostdefaultJSONResponse) VisitPayoutsPostResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PayoutsItemGetRequestObject struct {
	PayoutItemId PayoutItemId `json:"payout_item_id"`
}

type PayoutsItemGetResponseObject interface {
	VisitPayoutsItemGetResponse(w http.ResponseWriter) error
}

type PayoutsItemGet200JSONResponse PayoutItem

func (response PayoutsItemGet200JSONResponse) VisitPayoutsItemGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PayoutsItemGet404JSONResponse Error

func (response PayoutsItemGet404JSONResponse) VisitPayoutsItemGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PayoutsItemGet500JSONResponse Error

func (response PayoutsItemGet500JSONResponse) VisitPayoutsItemGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PayoutsItemGetdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PayoutsItemGetdefaultJSONResponse) VisitPayoutsItemGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PayoutsItemCancelRequestObject struct {
	PayoutItemId PayoutItemId `json:"payout_item_id"`
}

type PayoutsItemCancelResponseObject interface {
	VisitPayoutsItemCancelResponse(w http.ResponseWriter) error
}

type PayoutsItemCancel200JSONResponse PayoutItem

func (response PayoutsItemCancel200JSONResponse) VisitPayoutsItemCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PayoutsItemCancel400JSONResponse Error

func (response PayoutsItemCancel400JSONResponse) VisitPayoutsItemCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PayoutsItemCancel404JSONResponse Error

func (response PayoutsItemCancel404JSONResponse) VisitPayoutsItemCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PayoutsItemCancel500JSONResponse Error

func (response PayoutsItemCancel500JSONResponse) VisitPayoutsItemCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PayoutsItemCanceldefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PayoutsItemCanceldefaultJSONResponse) VisitPayoutsItemCancelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type PayoutsGetRequestObject struct {
	Id     Id `json:"id"`
	Params PayoutsGetParams
}

type PayoutsGetResponseObject interface {
	VisitPayoutsGetResponse(w http.ResponseWriter) error
}

type PayoutsGet200JSONResponse PayoutBatch

func (response PayoutsGet200JSONResponse) VisitPayoutsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PayoutsGet404JSONResponse Error

func (response PayoutsGet404JSONResponse) VisitPayoutsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PayoutsGet500JSONResponse Error

func (response PayoutsGet500JSONResponse) VisitPayoutsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PayoutsGetdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response PayoutsGetdefaultJSONResponse) VisitPayoutsGetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create batch payout
	// (POST /v1/payments/payouts)
	PayoutsPost(ctx context.Context, request PayoutsPostRequestObject) (PayoutsPostResponseObject, error)
	// Show payout item details
	// (GET /v1/payments/payouts-item/{payout_item_id})
	PayoutsItemGet(ctx context.Context, request PayoutsItemGetRequestObject) (PayoutsItemGetResponseObject, error)
	// Cancel unclaimed payout item
	// (POST /v1/payments/payouts-item/{payout_item_id}/cancel)
	PayoutsItemCancel(ctx context.Context, request PayoutsItemCancelRequestObject) (PayoutsItemCancelResponseObject, error)
	// Show payout batch details
	// (GET /v1/payments/payouts/{id})
	PayoutsGet(ctx context.Context, request PayoutsGetRequestObject) (PayoutsGetResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// PayoutsPost operation middleware
func (sh *strictHandler) PayoutsPost(w http.ResponseWriter, r *http.Request, params PayoutsPostParams) {
	var request PayoutsPostRequestObject

	request.Params = params

	var body PayoutsPostJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PayoutsPost(ctx, request.(PayoutsPostRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PayoutsPost")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PayoutsPostResponseObject); ok {
		if err := validResponse.VisitPayoutsPostResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PayoutsItemGet operation middleware
func (sh *strictHandler) PayoutsItemGet(w http.ResponseWriter, r *http.Request, payoutItemId PayoutItemId) {
	var request PayoutsItemGetRequestObject

	request.PayoutItemId = payoutItemId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PayoutsItemGet(ctx, request.(PayoutsItemGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PayoutsItemGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PayoutsItemGetResponseObject); ok {
		if err := validResponse.VisitPayoutsItemGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PayoutsItemCancel operation middleware
func (sh *strictHandler) PayoutsItemCancel(w http.ResponseWriter, r *http.Request, payoutItemId PayoutItemId) {
	var request PayoutsItemCancelRequestObject

	request.PayoutItemId = payoutItemId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PayoutsItemCancel(ctx, request.(PayoutsItemCancelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PayoutsItemCancel")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PayoutsItemCancelResponseObject); ok {
		if err := validResponse.VisitPayoutsItemCancelResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PayoutsGet operation middleware
func (sh *strictHandler) PayoutsGet(w http.ResponseWriter, r *http.Request, id Id, params PayoutsGetParams) {
	var request PayoutsGetRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PayoutsGet(ctx, request.(PayoutsGetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PayoutsGet")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PayoutsGetResponseObject); ok {
		if err := validResponse.VisitPayoutsGetResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
